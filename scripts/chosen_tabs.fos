// Author: cvet
// Server and client stuff for radio
#include "_macros.fos"
#include "_client_defines.fos"
#include "_colors.fos"
#include "_msgstr.fos"
#include "sprite.fos"

import int GUI_GetActiveMainScreen() from "client_gui";
import int GUI_GetActiveScreen() from "client_gui";
import int GetIniValue( string& iniKey, int defaultValue ) from "ini_parser";
import int[] @ GetIniValues2( string & iniKey, int[] @ defaultValues ) from "ini_parser";

#define TAB_SPRITE_LENGTH    ( 127 )

Sprite TabPic;
int[]  Position;
int    StepX;
int    StepY;
bool   LevelUp;
int    CurTab;

bool   IsHeavyDmg;    // pm added
bool   IsBullOver;    // pm added
bool   IsBleed;       // pm added
bool   IsBldTox;      // pm added
/*bool   IsOrgDmg;      // Повр. органов*/

void InitChosenTabs() // Export
{
    TabPic.LoadByIni( "ChosenTabPic", PT_ART_INTRFACE );
    Position = GetIniValues2( "ChosenTab", null );
    StepX = GetIniValue( "ChosenTabStepX", 0 );
    StepY = GetIniValue( "ChosenTabStepY", 5 );
    if( StepX != 0 )
        StepX += TabPic.Width;
    if( StepY != 0 )
        StepY += TabPic.Height;
    LevelUp = false;
    CurTab = 0;

    IsHeavyDmg = false;                 // pm added
    IsBullOver = false;                 // pm added
    IsBleed = false;                    // pm added
    IsBldTox = false;                   // pm added
/*	IsOrgDmg = false;					// Повреждение органов*/
}

void SetChosenTabLevelUp( bool enable ) // Export
{
    LevelUp = enable;
}

void SetChosenTabHeavyDmg( bool enable ) // Export
{
    IsHeavyDmg = enable;
}

void SetChosenTabBullOver( bool enable ) // Export
{
    IsBullOver = enable;
}

void SetChosenTabBleed( bool enable ) // Export
{
    IsBleed = enable;
}

void SetChosenTabBldTox( bool enable ) // Export
{
    IsBldTox = enable;
}

/*void SetChosenTabOrgDmg( bool enable ) // Export
{
    IsOrgDmg = enable;
}*/


void DrawChosenTabs() // Export
{
    if( GUI_GetActiveMainScreen() != CLIENT_MAIN_SCREEN_GAME )
        return;

    CritterCl@ chosen = GetChosen();
    if( not valid( chosen ) )
        return;

    if( LevelUp && ( GUI_GetActiveMainScreen() != CLIENT_MAIN_SCREEN_GAME ||
                     GUI_GetActiveScreen() == CLIENT_SCREEN_CHARACTER || GUI_GetActiveScreen() == CLIENT_SCREEN_PERK ) )
        LevelUp = false;

    CurTab = 0;

    if( chosen.IsAddicted() )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_ADDICTED_TITLE ), COLOR_DRED );

    if( chosen.IsInjured() )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_INJURED_TITLE ), COLOR_DRED );

    if( FLAG( chosen.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG ) )                        
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_HEAVY_DMG_TITLE ), COLOR_DRED );

	if( FLAG( chosen.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER ) )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_BULLET_OVER_TITLE ), COLOR_DRED );

	
    uint paralysis = CLAMP( chosen.StatBase[ ST_PARALYSIS_LEVEL ], 0, 100 );
	if( paralysis > 0 )
		DrawTab( "Паралич [" + paralysis + "%]", __GetGradient( COLOR_GREEN, COLOR_DRED, 100 - paralysis ) );
		
    uint bleed = CLAMP( 100 * chosen.StatBase[ ST_BLEED ] / chosen.Stat[ST_MAX_LIFE], 0, 100 );
	if( bleed > 5 )
		DrawTab( "Кровотечение [" + bleed + "%]", __GetGradient( COLOR_GREEN, COLOR_DRED, 100 - bleed ) );
        //DrawTab( GetMsgStr( TEXTMSG_GAME, STR_BLEED_TITLE ), COLOR_DRED );                    

	uint blood_loss = CLAMP( ( chosen.ParamBase[ BP_BLOOD_LOSS ] * 100 ) / ( chosen.Stat[ST_MAX_LIFE] - __DeadHitPoints ), 0, 100 );
	if( blood_loss > 5 )
		DrawTab( "Кровопотеря [" + blood_loss + "%]", __GetGradient( COLOR_GREEN, COLOR_DRED, 100 - blood_loss ) );

	uint toxic = CLAMP( ( 100 * chosen.StatBase[ ST_BLOOD_TOXIC ] ) / ( chosen.Stat[ ST_ENDURANCE ] * 20 ), 0, 100 );
    if( toxic > 5 )
		DrawTab( "Токсины [" + toxic + "%]", __GetGradient( COLOR_GREEN, COLOR_DRED, 100 - toxic ) );
        //DrawTab( GetMsgStr( TEXTMSG_GAME, STR_BLOOD_TOXIC_TITLE ), COLOR_DRED );
	
	uint illness = CLAMP( chosen.StatBase[ ST_TOXIC ], 0, 100 );
    if( illness > 5 )
		DrawTab( "Болезнь [" + illness + "%]", __GetGradient( COLOR_GREEN, COLOR_DRED, 100 - illness ) );

	uint poison = CLAMP( chosen.Stat[ ST_POISONING_LEVEL ], 0, 100 );
	if( poison > 5 ) 
        DrawTab( "Отравление [" + poison + "%]", __GetGradient( COLOR_GREEN, COLOR_DRED, 100 - poison ) );
		//DrawTab( GetMsgStr( TEXTMSG_GAME, STR_POISONED_TITLE ), COLOR_DRED );

    uint radiation = CLAMP( chosen.Stat[ ST_RADIATION_LEVEL ] / 10, 0, 100 );
	if( radiation > 5 ) 
        DrawTab( "Радиация [" + radiation + "%]", __GetGradient( COLOR_GREEN, COLOR_DRED, 100 - radiation ) );
        //DrawTab( GetMsgStr( TEXTMSG_GAME, STR_RADIATED_TITLE ), COLOR_DRED );

	uint8 dyspnea = CLAMP( 100 - chosen.StatBase[ ST_DYSPNEA ], 0, 100 );
	if( dyspnea > 5 )
		DrawTab( "Удушье [" + dyspnea + "%]", __GetGradient( COLOR_GREEN, COLOR_DRED, 100 - dyspnea ) );

    uint8 hunger = CLAMP( 100 - chosen.StatBase[ ST_HUNGER ], 0, 100 );
	if( hunger > 5 )
		DrawTab( "Голод [" + hunger + "%]", __GetGradient( COLOR_GREEN, COLOR_DRED, 100 - hunger ) );

    uint8 thrist = CLAMP( 100 - chosen.StatBase[ ST_THRIST ], 0, 100 );
	if( thrist > 5 )
		DrawTab( "Жажда [" + thrist + "%]", __GetGradient( COLOR_GREEN, COLOR_DRED, 100 - thrist ) );

    uint delay = chosen.Timeout[ TO_TRANSFER ] / __TimeMultiplier;
	if( delay > 0 )
		DrawTab( "Переход [" + delay + "]", __GetGradient( COLOR_GREEN, COLOR_DRED, 100 * ( 15 - delay ) / 15 ) );

    if( chosen.IsOverweight() )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_OVERWEIGHT_TITLE ), COLOR_DRED );

    if( LevelUp )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_LEVELUP_TITLE ), COLOR_DGREEN );

    if( chosen.Mode[ MODE_HIDE ] != 0 )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_HIDEMODE_TITLE ), COLOR_DGREEN );
		
	if( chosen.Mode[ MODE_NO_RUN ] == 2 )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_RELOAD_TITLE ), COLOR_DGREEN );

    if( IsTurnBased() && chosen.IsTurnBasedTurn() )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_YOU_TURN_TITLE ), GetTurnBasedTime() / 1000, COLOR_DGREEN );

    if( IsTurnBased() && !chosen.IsTurnBasedTurn() )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_TURN_BASED_TITLE ), COLOR_DGREEN );
		
	uint taking_delay = chosen.Timeout[ TO_SK_STEAL ] / __TimeMultiplier;
	if( taking_delay > 0 )
		DrawTab( "Действие [" + taking_delay + "]", __GetGradient( COLOR_GREEN, COLOR_DRED, 100 * ( 6 - CLAMP( taking_delay, 0, 6 ) ) / 6 ) );

	uint craft_delay = chosen.Timeout[ TO_TIREDNESS ] / __TimeMultiplier;
	if( craft_delay > 0 )
		DrawTab( "Усталость [" + craft_delay + "]", craft_delay >= 60 ? COLOR_LGRAY : __GetGradient( COLOR_GREEN, COLOR_DRED, 100 * ( 60 - CLAMP( craft_delay, 0, 60 ) ) / 60 ) );

    // if(FLAG(chosen.StatBase[ST_CRSTATUS], CR_STATUS_BLEED))
    //	DrawTab(GetMsgStr(TEXTMSG_GAME, STR_BLEED_TITLE), COLOR_DRED);			//old bleed
/*    if( FLAG( chosen.StatBase[ ST_CRSTATUS ], CR_STATUS_ORG_DMG ) )					//Повреждение органов.
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_ORG_DMG_TITLE ), COLOR_DRED );*/
}

void DrawTab( string@ text, uint color )
{
    uint8 tempTab = CurTab;

	uint8 width = __ScreenWidth / StepX;
	uint8 tx = CurTab % width;
	uint8 ty = CurTab / width;
	
    TabPic.Draw( Position[ 0 ] + tx * StepX, Position[ 1 ] + ty * 25 );
    DrawText( text, Position[ 0 ] + tx * StepX, Position[ 1 ] + ty * 25, TabPic.Width, TabPic.Height, color, FONT_FALLOUT, FT_CENTERXY );
    CurTab++;
}

void DrawTab( string@ text, int value, uint color )
{

    bool offsetY = false;

    if( Position[ 0 ] + StepX * ( CurTab + 1 ) > __ScreenWidth )
    {
        offsetY = true;
    }

    uint8 tempTab = CurTab;

    if( offsetY )
    {
        tempTab -= __ScreenWidth / TAB_SPRITE_LENGTH;
    }

    uint16 time = value / __TimeMultiplier + 1;  // pm added

    text = ReplaceText( text, "VALUE", time );   // pm edit
    TabPic.Draw( Position[ 0 ] + tempTab * StepX, Position[ 1 ] + tempTab * StepY + ( offsetY ? 25 : 0 ) );
    DrawText( text, Position[ 0 ] + tempTab * StepX, Position[ 1 ] + tempTab * StepY + ( offsetY ? 25 : 0 ), TabPic.Width, TabPic.Height, color, FONT_FALLOUT, FT_CENTERXY );
    CurTab++;
}
