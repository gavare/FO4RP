// Author: cvet
#ifdef __CLIENT // Macro defined in client_main.fos
# define Critter            CritterCl
#endif

#include "_macros.fos"

#ifndef __CLIENT
import int NextLevelNeedExp( Critter& cr )  from "parameters";
#endif


bool PerkCheck( Critter& cr, uint perk ) // Export
{
    #define PROCESS_PERK0                   \
        # ( perk, range, level ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level )
    #define PROCESS_PERK1                            \
        # ( perk, range, level, demand0 ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 )
    #define PROCESS_PERK2                                     \
        # ( perk, range, level, demand0, demand1 ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 )
    #define PROCESS_PERK3                                              \
        # ( perk, range, level, demand0, demand1, demand2 ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 && demand2 )
    #define PROCESS_PERK4                                                       \
        # ( perk, range, level, demand0, demand1, demand2, demand3 ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 && demand2 && demand3 )
    #define PROCESS_PERK5                                                                \
        # ( perk, range, level, demand0, demand1, demand2, demand3, demand4 ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 && demand2 && demand3 && demand4 )
    switch( perk )
    {
        // Perks
		PROCESS_PERK1( PE_FLOWER_CHILD,        1,  3, cr.ParamBase[ ST_INTELLECT ] >= 4    );
        PROCESS_PERK1( PE_AWARENESS,           1,  3, cr.ParamBase[ ST_PERCEPTION ] >= 5    );
		PROCESS_PERK1( PE_GECKO_SKINNING,      1,  3, cr.ParamBase[ SK_OUTDOORSMAN ] >= 50    );
        PROCESS_PERK1( PE_BONUS_HTH_ATTACKS,   1, 15, cr.ParamBase[ ST_AGILITY ] >= 6       );
        PROCESS_PERK2( PE_BONUS_HTH_DAMAGE,    2,  3, cr.ParamBase[ ST_AGILITY ] >= 6,      cr.ParamBase[ ST_STRENGTH ] >= 5      );
        PROCESS_PERK1( PE_BONUS_MOVE,          0,  6, cr.ParamBase[ ST_AGILITY ] >= 5       );
        PROCESS_PERK2( PE_BONUS_RANGED_DAMAGE, 0,  6, cr.ParamBase[ ST_AGILITY ] >= 6,      cr.ParamBase[ ST_LUCK ] >= 6          );
        PROCESS_PERK3( PE_BONUS_RATE_OF_FIRE,  1, 15, cr.ParamBase[ ST_AGILITY ] >= 7,      cr.ParamBase[ ST_INTELLECT ] >= 6,    cr.ParamBase[ ST_PERCEPTION ] >= 6 );
        PROCESS_PERK1( PE_EARLIER_SEQUENCE,    0,  3, cr.ParamBase[ ST_PERCEPTION ] >= 6    );
        PROCESS_PERK1( PE_FASTER_HEALING,      3,  3, cr.ParamBase[ ST_ENDURANCE ] >= 6     );
        PROCESS_PERK1( PE_MORE_CRITICALS,      2,  6, cr.ParamBase[ ST_LUCK ] >= 6          );
        PROCESS_PERK2( PE_RAD_RESISTANCE,      2,  6, cr.ParamBase[ ST_ENDURANCE ] >= 6,    cr.ParamBase[ ST_INTELLECT ] >= 4     );
        PROCESS_PERK2( PE_TOUGHNESS,           2,  3, cr.ParamBase[ ST_ENDURANCE ] >= 6,    cr.ParamBase[ ST_LUCK ] >= 6          );
        PROCESS_PERK2( PE_STRONG_BACK,         3,  3, cr.ParamBase[ ST_STRENGTH ] >= 6,     cr.ParamBase[ ST_ENDURANCE ] >= 6     );
        PROCESS_PERK2( PE_SHARPSHOOTER,        1,  6, cr.ParamBase[ ST_PERCEPTION ] >= 7,   cr.ParamBase[ ST_INTELLECT ] >= 5     );
        PROCESS_PERK2( PE_SILENT_RUNNING,      1,  6, cr.ParamBase[ ST_AGILITY ] >= 6,      cr.ParamBase[ SK_SNEAK ] >= 50        );
        PROCESS_PERK3( PE_SURVIVALIST,         3,  3, cr.ParamBase[ ST_ENDURANCE ] >= 5,    cr.ParamBase[ ST_INTELLECT ] >= 5,    cr.ParamBase[ SK_OUTDOORSMAN ] >= 30 );
        PROCESS_PERK2( PE_MASTER_TRADER,       0,  9, cr.ParamBase[ ST_CHARISMA ] >= 7,     cr.ParamBase[ SK_BARTER ] >= 60       );
        PROCESS_PERK1( PE_EDUCATED,            3,  3, cr.ParamBase[ ST_INTELLECT ] >= 6     );
        PROCESS_PERK4( PE_HEALER,              2,  3, cr.ParamBase[ ST_PERCEPTION ] >= 7,   cr.ParamBase[ ST_AGILITY ] >= 6,      cr.ParamBase[ ST_INTELLECT ] >= 5,        cr.ParamBase[ SK_FIRST_AID ] >= 40 );
        PROCESS_PERK3( PE_BETTER_CRITICALS,    0,  9, cr.ParamBase[ ST_PERCEPTION ] >= 6,   cr.ParamBase[ ST_LUCK ] >= 6,         cr.ParamBase[ ST_AGILITY ] >= 4 );
        PROCESS_PERK5( PE_SLAYER,              1, 24, cr.ParamBase[ ST_AGILITY ] >= 8,      cr.ParamBase[ ST_STRENGTH ] >= 8,     cr.ParamBase[ SK_UNARMED ] >= 80,         cr.ParamBase[ PE_SNIPER ] == 0,            cr.ParamBase[ PE_TERMINATOR ] == 0 );
        PROCESS_PERK5( PE_SNIPER,              1, 24, cr.ParamBase[ ST_AGILITY ] >= 8,      cr.ParamBase[ ST_PERCEPTION ] >= 8,   cr.ParamBase[ SK_SMALL_GUNS ] >= 80,      cr.ParamBase[ PE_SLAYER ] == 0,            cr.ParamBase[ PE_TERMINATOR ] == 0 );
        PROCESS_PERK3( PE_SILENT_DEATH,        1, 18, cr.ParamBase[ ST_AGILITY ] >= 10,     cr.ParamBase[ SK_SNEAK ] >= 80,       cr.ParamBase[ SK_UNARMED ] >= 80 );
        PROCESS_PERK1( PE_ACTION_BOY,          1, 9, cr.ParamBase[ ST_AGILITY ] >= 6       );
        PROCESS_PERK1( PE_LIFEGIVER,           1, 12, cr.ParamBase[ ST_ENDURANCE ] >= 4      );
        PROCESS_PERK1( PE_DODGER,              1,  6, cr.ParamBase[ ST_AGILITY ] >= 6       );
        PROCESS_PERK1( PE_SNAKEATER,           2,  6, cr.ParamBase[ ST_ENDURANCE ] >= 3     );
        PROCESS_PERK2( PE_MR_FIXIT,            1, 6, cr.ParamBase[ SK_REPAIR ] >= 40,      cr.ParamBase[ SK_SCIENCE ] >= 20      );
        PROCESS_PERK2( PE_MEDIC,               1, 6, cr.ParamBase[ SK_FIRST_AID ] >= 40,   cr.ParamBase[ SK_DOCTOR ] >= 40       );
        PROCESS_PERK2( PE_MASTER_THIEF,        0, 12, cr.ParamBase[ SK_STEAL ] >= 50,       cr.ParamBase[ SK_LOCKPICK ] >= 50     );
        PROCESS_PERK1( PE_SPEAKER,             1,  9, cr.ParamBase[ SK_SPEECH ] >= 50       );
        PROCESS_PERK0( PE_HEAVE_HO,            3,  6  );
        PROCESS_PERK2( PE_PICKPOCKET,          0, 15, cr.ParamBase[ ST_AGILITY ] >= 8,      cr.ParamBase[ SK_STEAL ] >= 80 );
        PROCESS_PERK1( PE_GHOST,               1,  6, cr.ParamBase[ SK_SNEAK ] >= 60        );
        PROCESS_PERK0( PE_EXPLORER,            1,  9  );
        PROCESS_PERK2( PE_PATHFINDER,          2,  3, cr.ParamBase[ ST_ENDURANCE ] >= 5,    cr.ParamBase[ SK_OUTDOORSMAN ] >= 40  );
        PROCESS_PERK1( PE_SCOUT,               1,  3, cr.ParamBase[ ST_PERCEPTION ] >= 7    );
        PROCESS_PERK1( PE_RANGER,              1,  6, cr.ParamBase[ ST_PERCEPTION ] >= 6    );
        PROCESS_PERK1( PE_QUICK_POCKETS,       1,  3, cr.ParamBase[ ST_AGILITY ] >= 5       );
        PROCESS_PERK1( PE_SMOOTH_TALKER,       3,  3, cr.ParamBase[ ST_INTELLECT ] >= 4     );
        PROCESS_PERK1( PE_SWIFT_LEARNER,       3,  3, cr.ParamBase[ ST_INTELLECT ] >= 4     );
        PROCESS_PERK1( PE_ADRENALINE_RUSH,     1,  6, cr.ParamBase[ ST_STRENGTH ] < 10      );
        PROCESS_PERK1( PE_CAUTIOUS_NATURE,     0,  3, cr.ParamBase[ ST_PERCEPTION ] >= 6    );
        PROCESS_PERK1( PE_COMPREHENSION,       1,  3, cr.ParamBase[ ST_INTELLECT ] >= 6     );
        PROCESS_PERK2( PE_DEMOLITION_EXPERT,   1,  6, cr.ParamBase[ ST_AGILITY ] >= 4,      cr.ParamBase[ SK_TRAPS ] >= 35        );
        PROCESS_PERK1( PE_GAMBLER,             1,  6, cr.ParamBase[ SK_GAMBLING ] >= 50     );
        PROCESS_PERK1( PE_GAIN_STRENGTH,       3, 12, cr.ParamBase[ ST_STRENGTH ] < 10      );
        PROCESS_PERK1( PE_GAIN_PERCEPTION,     3, 12, cr.ParamBase[ ST_PERCEPTION ] < 10    );
        PROCESS_PERK1( PE_GAIN_ENDURANCE,      3, 12, cr.ParamBase[ ST_ENDURANCE ] < 10     );
        PROCESS_PERK1( PE_GAIN_CHARISMA,       3, 12, cr.ParamBase[ ST_CHARISMA ] < 10      );
        PROCESS_PERK1( PE_GAIN_INTELLIGENCE,   3, 12, cr.ParamBase[ ST_INTELLECT ] < 10     );
        PROCESS_PERK1( PE_GAIN_AGILITY,        3, 12, cr.ParamBase[ ST_AGILITY ] < 10       );
        PROCESS_PERK1( PE_GAIN_LUCK,           3, 12, cr.ParamBase[ ST_LUCK ] < 10          );
        PROCESS_PERK2( PE_HARMLESS,            0,  6, cr.ParamBase[ SK_STEAL ] >= 50,       cr.ParamBase[ ST_KARMA ] >= 50        );
        PROCESS_PERK0( PE_HERE_AND_NOW,        0,  9  );
        PROCESS_PERK2( PE_HTH_EVADE,           1,  12, cr.ParamBase[ ST_CHARISMA ] >= 7,    cr.PerkBase[ PE_KARMA_BEACON ] == 0 );
        PROCESS_PERK2( PE_KAMA_SUTRA_MASTER,   1,  3, cr.ParamBase[ ST_ENDURANCE ] >= 5,    cr.ParamBase[ ST_AGILITY ] >= 5       );
        PROCESS_PERK2( PE_KARMA_BEACON,  1,  12, cr.ParamBase[ ST_INTELLECT ] < 4,  	cr.PerkBase[ PE_HTH_EVADE ] == 0    );
        PROCESS_PERK2( PE_LIGHT_STEP,          1,  9, cr.ParamBase[ ST_AGILITY ] >= 5,      cr.ParamBase[ ST_LUCK ] >= 5          );
        PROCESS_PERK1( PE_LIVING_ANATOMY,      1,  9, cr.ParamBase[ SK_DOCTOR ] >= 60       );
        PROCESS_PERK1( PE_MAGNETIC_PERSONALITY, 1,  6, cr.ParamBase[ ST_CHARISMA ] >= 5      );
        PROCESS_PERK2( PE_NEGOTIATOR,          1,  6, cr.ParamBase[ SK_SPEECH ] >= 50,      cr.ParamBase[ SK_BARTER ] >= 50       );
        PROCESS_PERK0( PE_PACK_RAT,            1,  6  );
        PROCESS_PERK1( PE_PYROMANIAC,          1,  9, cr.ParamBase[ SK_BIG_GUNS ] >= 75     );
        PROCESS_PERK1( PE_QUICK_RECOVERY,      1,  3, cr.ParamBase[ ST_AGILITY ] >= 5       );
        PROCESS_PERK1( PE_SALESMAN,            1,  6, cr.ParamBase[ SK_BARTER ] >= 50       );
        PROCESS_PERK1( PE_STONEWALL,           1,  3, cr.ParamBase[ ST_STRENGTH ] >= 6      );
        PROCESS_PERK0( PE_THIEF,               0,  3  );
        PROCESS_PERK1( PE_WEAPON_HANDLING,     1, 12, cr.ParamBase[ ST_AGILITY ] >= 5       );
        PROCESS_PERK5( PE_TERMINATOR,          0, 24, cr.ParamBase[ ST_STRENGTH ] >= 8,     cr.ParamBase[ ST_ENDURANCE ] >= 8,    cr.ParamBase[ SK_DOCTOR ] >= 80,          cr.ParamBase[ PE_SNIPER ] == 0,            cr.ParamBase[ PE_SLAYER ] == 0 );
    default:
        break;
    }
    return false;
}

#ifndef __CLIENT
void PerkUp( Critter& cr, uint perk ) // Export
{
    # define PERKUP_STAT    # ( param, val )cr.StatBase[ param ] val
    # define PERKUP_SKILL                                                                      \
        # ( param, val )cr.SkillBase[ param ] val; if( cr.SkillBase[ param ] > MAX_SKILL_VAL ) \
            cr.SkillBase[ param ] = MAX_SKILL_VAL
    switch( perk )
    {
    // Perks
    case PE_AWARENESS:         /*Examining a target shows hitpoints, weapon and ammunition count*/
		PERKUP_STAT( ST_PERCEPTION, ++ );
        break;
    case PE_BONUS_HTH_ATTACKS: /*-1 Ap on HtH attacks*/
        break;
    case PE_BONUS_HTH_DAMAGE:
        PERKUP_STAT( ST_MELEE_DAMAGE, += 8 );
        break;
    case PE_BONUS_MOVE:
        PERKUP_STAT( ST_MAX_MOVE_AP, += 2 );
        break;
    case PE_BONUS_RANGED_DAMAGE:    /*In calc damage +2 per range*/
        break;
    case PE_BONUS_RATE_OF_FIRE:     /*-1 Ap on ranged attacks*/
        break;
    case PE_EARLIER_SEQUENCE:
        PERKUP_STAT( ST_SEQUENCE, += 2 );
        break;
    case PE_FASTER_HEALING:
        PERKUP_STAT( ST_HEALING_RATE, += 5 );
		PERKUP_SKILL( SK_OUTDOORSMAN, += 35 );
        break;
    case PE_MORE_CRITICALS:
        PERKUP_STAT( ST_CRITICAL_CHANCE, += 10 );
        break;
    case PE_RAD_RESISTANCE:
        PERKUP_STAT( ST_RADIATION_RESISTANCE, += 15 );
        break;
    case PE_TOUGHNESS:
        PERKUP_STAT( ST_NORMAL_RESIST, += 10 );
		PERKUP_STAT( ST_FIRE_RESIST, += 10 );
		PERKUP_STAT( ST_LASER_RESIST, += 10 );
		PERKUP_STAT( ST_PLASMA_RESIST, += 10 );
		PERKUP_STAT( ST_ELECTRO_RESIST, += 10 );
		PERKUP_STAT( ST_EXPLODE_RESIST, += 10 );
        break;
    case PE_STRONG_BACK:
        PERKUP_STAT( ST_CARRY_WEIGHT, += LBS_TO_GRAMM( 100 ) );
        break;
    case PE_SHARPSHOOTER:
        PERKUP_STAT( ST_BONUS_LOOK, += 6 ); /*+2 perception on ranged attack*/ break;
    case PE_SILENT_RUNNING:     /*No steal off while running*/
        break;
    case PE_SURVIVALIST:
        PERKUP_SKILL( SK_OUTDOORSMAN, += 25 );
		PERKUP_STAT( ST_MAX_LIFE, += 8 );
		PERKUP_STAT( ST_HEALING_RATE, += 5 );
		PERKUP_SKILL( SK_MELEE_WEAPONS, += 25 );
        break;
    case PE_MASTER_TRADER:     /*Barter k is zero on buy*/
        break;
    case PE_EDUCATED:
        PERKUP_STAT( ST_UNSPENT_SKILL_POINTS, += 30 ); /*+2 skill points per range*/ break;
    case PE_HEALER:     /*Additional Hp bonus in scripts*/
        break;
    case PE_BETTER_CRITICALS:
        PERKUP_STAT( ST_MAX_CRITICAL, += 20 );
        break;
    case PE_SLAYER:       /*All unarmed and melee attacks is critical*/
        break;
    case PE_SNIPER:       /*All gun attacks is critical*/
        break;
    case PE_SILENT_DEATH: /*Attack from sneak from back x2 damage*/
        break;
    case PE_ACTION_BOY:
        PERKUP_STAT( ST_ACTION_POINTS, += 2 );
        break;
    case PE_LIFEGIVER:
        PERKUP_STAT( ST_MAX_LIFE, += 15 );
        break;
    case PE_DODGER:
        PERKUP_STAT( ST_ARMOR_CLASS, += 10 );
		PERKUP_STAT( ST_AGILITY, += 1 );
        break;
    case PE_SNAKEATER:
        PERKUP_STAT( ST_POISON_RESISTANCE, += 45 );
		PERKUP_STAT( ST_ENDURANCE, += 1 );
		PERKUP_STAT( ST_MAX_LIFE, += 5 );
        break;
    case PE_MR_FIXIT:
        PERKUP_SKILL( SK_REPAIR, += 30 );
        PERKUP_SKILL( SK_SCIENCE, += 30 );
        break;
    case PE_MEDIC:
        PERKUP_SKILL( SK_FIRST_AID, += 30 );
        PERKUP_SKILL( SK_DOCTOR, += 30 );
        break;
    case PE_MASTER_THIEF:
        PERKUP_SKILL( SK_STEAL, += 20 );
        PERKUP_SKILL( SK_LOCKPICK, += 20 );
        break;
    case PE_SPEAKER:
        PERKUP_SKILL( SK_SPEECH, += 40 );
        break;
    case PE_HEAVE_HO:   /*+2 strength for throwing weapon*/
        break;
    case PE_PICKPOCKET: /*Ignore size and facing while stealing*/
        break;
    case PE_GHOST:      /*+20% sneak on night*/
        break;
    case PE_EXPLORER:   /*Higher chance of finding special places and people in random encounters*/
        break;
    case PE_PATHFINDER:	/*+25% speed on global per range*/
		PERKUP_SKILL( SK_OUTDOORSMAN, += 20 ); 
		break;
    case PE_SCOUT:      /*This will increase the amount of the map you can see while exploring and make finding the special random encounters a little easier.*/
		PERKUP_SKILL( SK_OUTDOORSMAN, += 20 );
		break;
    case PE_RANGER:
        PERKUP_SKILL( SK_OUTDOORSMAN, += 25 ); /*Fewer hostile random encounters*/ 
		break;
    case PE_QUICK_POCKETS:     /*Inventory items move ap cost div 2*/
        break;
    case PE_SMOOTH_TALKER:     /*+2 intellect on dialogs checks*/
        break;
    case PE_SWIFT_LEARNER:     /*+5% add experience per range*/
        break;
    case PE_ADRENALINE_RUSH:   /*+1 strength on <50% hp in battle*/
        break;
    case PE_CAUTIOUS_NATURE:   /*+3 perception on encounter generate*/
		PERKUP_STAT( ST_PERCEPTION, ++ );
        break;
    case PE_COMPREHENSION:     /*50% more points on books reading*/
        break;
    case PE_DEMOLITION_EXPERT: /*Used in explosion script*/
		PERKUP_SKILL( SK_TRAPS, += 40 );
        break;
    case PE_GAMBLER:
        PERKUP_SKILL( SK_GAMBLING, += 40 );
        break;
    case PE_GAIN_STRENGTH:
        PERKUP_STAT( ST_STRENGTH, ++ );
        break;
    case PE_GAIN_PERCEPTION:
        PERKUP_STAT( ST_PERCEPTION, ++ );
        break;
    case PE_GAIN_ENDURANCE:
        PERKUP_STAT( ST_ENDURANCE, ++ );
        break;
    case PE_GAIN_CHARISMA:
        PERKUP_STAT( ST_CHARISMA, ++ );
        break;
    case PE_GAIN_INTELLIGENCE:
        PERKUP_STAT( ST_INTELLECT, ++ );
        break;
    case PE_GAIN_AGILITY:
        PERKUP_STAT( ST_AGILITY, ++ );
        break;
    case PE_GAIN_LUCK:
        PERKUP_STAT( ST_LUCK, ++ );
        break;
    case PE_HARMLESS:
        PERKUP_SKILL( SK_STEAL, += 40 );
        break;
    case PE_HERE_AND_NOW:      /*+1 level*/
        cr.StatBase[ ST_EXPERIENCE ] += NextLevelNeedExp( cr ) - cr.ParamBase[ ST_EXPERIENCE ];
        break;
    case PE_HTH_EVADE:         /*Поглощение 30% конечного урона. Сила красоты*/
		PERKUP_STAT( ST_ARMOR_CLASS, += 20);
		PERKUP_STAT( ST_ACTION_POINTS, += 2 );
        break;
    case PE_KAMA_SUTRA_MASTER: /*In dialogs*/
        break;
    case PE_KARMA_BEACON:      /*Поглощение 20% конечного урона. Сила тупизны*/
		PERKUP_STAT( ST_MAX_LIFE, += 8 );
		PERKUP_STAT( ST_MELEE_DAMAGE, += 8 );
		PERKUP_STAT( ST_ACTION_POINTS, += 2 );
        break;
    case PE_LIGHT_STEP:        /*50% less chance of setting off a trap*/
        break;
    case PE_LIVING_ANATOMY:
        PERKUP_SKILL( SK_DOCTOR, += 20 ); /*Also +5 dmg*/ 
		PERKUP_SKILL( SK_FIRST_AID, += 20 );
		PERKUP_SKILL( SK_SCIENCE, += 20 );
		PERKUP_SKILL( SK_MELEE_WEAPONS, += 10 );
		break;
    case PE_MAGNETIC_PERSONALITY:     /*+1 people in group*/
		PERKUP_STAT( ST_CHARISMA, += 2);
		PERKUP_STAT( ST_ARMOR_CLASS, += 8);
        PERKUP_SKILL( SK_DOCTOR, += 20 );
		PERKUP_SKILL( SK_FIRST_AID, += 20 );
        break;
    case PE_NEGOTIATOR:
        PERKUP_SKILL( SK_SPEECH, += 20 );
        PERKUP_SKILL( SK_BARTER, += 20 );
        break;
    case PE_PACK_RAT:
        PERKUP_STAT( ST_CARRY_WEIGHT, += LBS_TO_GRAMM( 100 ) );
        break;
    case PE_PYROMANIAC:     /*+5 damage on fire attack*/
        break;
    case PE_QUICK_RECOVERY: /* 1 ap for stending up*/
        break;
    case PE_SALESMAN:
        PERKUP_SKILL( SK_BARTER, += 40 );
        break;
    case PE_STONEWALL:     /*Reduction in chance to be knocked down during combat*/
        break;
    case PE_THIEF:
        PERKUP_SKILL( SK_SNEAK, += 10 );
        PERKUP_SKILL( SK_LOCKPICK, += 10 );
        PERKUP_SKILL( SK_STEAL, += 10 );
        PERKUP_SKILL( SK_TRAPS, += 10 );
        break;
    case PE_WEAPON_HANDLING:     /*In use weapon strength +3*/
        break;
	case PE_FORT_LID_1:				/*Лидер Форта 1 уровень*/
		PERKUP_SKILL( SK_UNARMED, += 50 );
		PERKUP_SKILL( SK_MELEE_WEAPONS, += 50 );
		PERKUP_SKILL( SK_SMALL_GUNS, += 30 );
		PERKUP_SKILL( SK_BIG_GUNS, += 30 );
		PERKUP_SKILL( SK_ENERGY_WEAPONS, += 30 );
		PERKUP_SKILL( SK_SPEECH, += 50 );
		PERKUP_SKILL( SK_FIRST_AID, += 20 );
		PERKUP_SKILL( SK_DOCTOR, += 20 );
		PERKUP_SKILL( SK_REPAIR, += 20 );
		PERKUP_SKILL( SK_OUTDOORSMAN, += 20 );
		PERKUP_STAT (ST_CARRY_WEIGHT , += 10 );
		break;
	case PE_FORT_LID_2:				/*Лидер Форта 2 уровень*/
		PERKUP_STAT( ST_STRENGTH, ++ );
		PERKUP_STAT( ST_PERCEPTION, ++ );
		PERKUP_STAT( ST_EXPERIENCE, ++ );
		PERKUP_STAT( ST_CHARISMA, ++ );
		PERKUP_STAT( ST_INTELLECT, ++ );
		PERKUP_STAT( ST_AGILITY, ++ );
		PERKUP_STAT( ST_LUCK, ++ );
		break;
	case PE_FORT_LID_3:				/*Лидер Форта 3 уровень*/
		PERKUP_STAT( ST_CRITICAL_CHANCE, +=5 );
		PERKUP_STAT( ST_MELEE_DAMAGE, += 5 );
		PERKUP_STAT( ST_ACTION_POINTS, += 1 );
		PERKUP_STAT( ST_MAX_LIFE, += 10 );
		PERKUP_STAT( ST_NORMAL_RESIST, += 5 );
		PERKUP_STAT( ST_ELECTRO_RESIST, += 5 );
		PERKUP_STAT( ST_FIRE_RESIST, += 5 );
		PERKUP_STAT( ST_LASER_RESIST, += 5 );
		PERKUP_STAT( ST_PLASMA_RESIST, += 5 );
        break;
	case PE_ZLO_LID_1:				/*Главный Злодей 1 уровень*/
		PERKUP_SKILL( SK_UNARMED, += 40 );
		PERKUP_SKILL( SK_MELEE_WEAPONS, += 40 );
		PERKUP_SKILL( SK_SMALL_GUNS, += 40 );
		PERKUP_SKILL( SK_BIG_GUNS, += 40 );
		PERKUP_SKILL( SK_ENERGY_WEAPONS, += 40 );
		PERKUP_SKILL( SK_FIRST_AID, += 20 );
		PERKUP_SKILL( SK_REPAIR, += 40 );
		PERKUP_SKILL( SK_OUTDOORSMAN, += 50 );
		PERKUP_STAT (ST_CARRY_WEIGHT , += 30 );
        break;
	case PE_ZLO_LID_2:				/*Главный Злодей 2 уровень*/
		PERKUP_STAT( ST_STRENGTH, ++ );
		PERKUP_STAT( ST_PERCEPTION, ++ );
		PERKUP_STAT( ST_EXPERIENCE, ++ );
		PERKUP_STAT( ST_INTELLECT, ++ );
		PERKUP_STAT( ST_AGILITY, ++ );
		PERKUP_STAT( ST_LUCK, ++ );
        break;
	case PE_ZLO_LID_3:				/*Главный Злодей 3 уровень*/
		PERKUP_STAT( ST_CRITICAL_CHANCE, +=5 );
		PERKUP_STAT( ST_MELEE_DAMAGE, += 5 );
		PERKUP_STAT( ST_ACTION_POINTS, += 1 );
		PERKUP_STAT( ST_MAX_LIFE, += 20 );
		PERKUP_STAT( ST_NORMAL_RESIST, += 10 );
		PERKUP_STAT( ST_ELECTRO_RESIST, += 10 );
		PERKUP_STAT( ST_FIRE_RESIST, += 10 );
		PERKUP_STAT( ST_LASER_RESIST, += 10 );
		PERKUP_STAT( ST_PLASMA_RESIST, += 10 );
        break;
	case PE_GM_CLON:				/*ГМ клон*/
		PERKUP_STAT( ST_STRENGTH, = 0 );
		PERKUP_STAT( ST_PERCEPTION, = 0 );
		PERKUP_STAT( ST_EXPERIENCE, = 0 );
		PERKUP_STAT( ST_CHARISMA, = 0 );
		PERKUP_STAT( ST_INTELLECT, = 0 );
		PERKUP_STAT( ST_AGILITY, = 0 );
		PERKUP_STAT( ST_LUCK, = 0 );
		PERKUP_STAT( ST_MAX_LIFE, = 1 );
		PERKUP_STAT( ST_ARMOR_CLASS, = 0 );
		PERKUP_STAT( ST_ACTION_POINTS, = 0 );
		PERKUP_STAT (ST_CARRY_WEIGHT , = 0 );
		PERKUP_STAT( ST_MELEE_DAMAGE, = 0 );
		PERKUP_STAT( ST_NORMAL_RESIST, = 0 );
		PERKUP_STAT( ST_ELECTRO_RESIST, = 0 );
		PERKUP_STAT( ST_FIRE_RESIST, = 0 );
		PERKUP_STAT( ST_LASER_RESIST, = 0 );
		PERKUP_STAT( ST_PLASMA_RESIST, = 0 );
		PERKUP_STAT( ST_EXPLODE_RESIST, = 0 );
		PERKUP_STAT( ST_NORMAL_ABSORB, = 0 );
		PERKUP_STAT( ST_ELECTRO_ABSORB, = 0 );
		PERKUP_STAT( ST_FIRE_ABSORB, = 0 );
		PERKUP_STAT( ST_LASER_ABSORB, = 0 );
		PERKUP_STAT( ST_PLASMA_ABSORB, = 0 );
		PERKUP_STAT( ST_EXPLODE_ABSORB, = 0 );
		PERKUP_STAT( ST_CRITICAL_CHANCE, = 0 );
		PERKUP_STAT( ST_MAX_LIFE, = 0 );
		PERKUP_STAT( ST_HEALING_RATE, = 0 );
		PERKUP_SKILL( SK_UNARMED, = 0 ); //Навыки
		PERKUP_SKILL( SK_MELEE_WEAPONS, = 0 );
		PERKUP_SKILL( SK_SMALL_GUNS, = 0 );
		PERKUP_SKILL( SK_BIG_GUNS, = 0 );
		PERKUP_SKILL( SK_ENERGY_WEAPONS, = 0 );
		PERKUP_SKILL( SK_SPEECH, = 0 );
		PERKUP_SKILL( SK_FIRST_AID, = 0 );
		PERKUP_SKILL( SK_DOCTOR, = 0 );
		PERKUP_SKILL( SK_REPAIR, = 0 );
		PERKUP_SKILL( SK_OUTDOORSMAN, = 0 );
		PERKUP_SKILL( SK_SNEAK, = 0 );
        PERKUP_SKILL( SK_LOCKPICK, = 0 );
        PERKUP_SKILL( SK_STEAL, = 0 );
        PERKUP_SKILL( SK_TRAPS, = 0 );
        break;
    default:
        break;
    }
}

void PerkDown( Critter& cr, uint perk ) // Export
{
    # define PERKDOWN_STAT    # ( param, val )cr.StatBase[ param ] val
    # define PERKDOWN_SKILL                                                                     \
        # ( param, val )cr.SkillBase[ param ] val; if( cr.SkillBase[ param ] < -MAX_SKILL_VAL ) \
            cr.SkillBase[ param ] = -MAX_SKILL_VAL
    switch( perk )
    {
    // Perks
    case PE_AWARENESS:
		PERKDOWN_STAT( ST_PERCEPTION, -- );
        break;
    case PE_BONUS_HTH_ATTACKS:
        break;
    case PE_BONUS_HTH_DAMAGE:
        PERKDOWN_STAT( ST_MELEE_DAMAGE, -= 8 );
        break;
    case PE_BONUS_MOVE:
        PERKDOWN_STAT( ST_MAX_MOVE_AP, -= 2 );
        break;
    case PE_BONUS_RANGED_DAMAGE:
        break;
    case PE_BONUS_RATE_OF_FIRE:
        break;
    case PE_EARLIER_SEQUENCE:
        PERKDOWN_STAT( ST_SEQUENCE, -= 2 );
        break;
    case PE_FASTER_HEALING:
        PERKDOWN_STAT( ST_HEALING_RATE, -= 5 );
		PERKDOWN_SKILL( SK_OUTDOORSMAN, -= 35 );
        break;
    case PE_MORE_CRITICALS:
        PERKDOWN_STAT( ST_CRITICAL_CHANCE, -= 10 );
        break;
    case PE_RAD_RESISTANCE:
        PERKDOWN_STAT( ST_RADIATION_RESISTANCE, -= 15 );
        break;
    case PE_TOUGHNESS:
        PERKDOWN_STAT( ST_NORMAL_RESIST, -= 10 );
		PERKDOWN_STAT( ST_FIRE_RESIST, -= 10 );
		PERKDOWN_STAT( ST_LASER_RESIST, -= 10 );
		PERKDOWN_STAT( ST_PLASMA_RESIST, -= 10 );
		PERKDOWN_STAT( ST_ELECTRO_RESIST, -= 10 );
		PERKDOWN_STAT( ST_EXPLODE_RESIST, -= 10 );
        break;
    case PE_STRONG_BACK:
        PERKDOWN_STAT( ST_CARRY_WEIGHT, -= LBS_TO_GRAMM( 100 ) );
        break;
    case PE_SHARPSHOOTER:
        PERKDOWN_STAT( ST_BONUS_LOOK, -= 6 );
        break;
    case PE_SILENT_RUNNING:
        break;
    case PE_SURVIVALIST:
        PERKDOWN_SKILL( SK_OUTDOORSMAN, -= 25 );
		PERKDOWN_STAT( ST_MAX_LIFE, -= 8 );
		PERKDOWN_STAT( ST_HEALING_RATE, -= 5 );
		PERKDOWN_SKILL( SK_MELEE_WEAPONS, -= 25 );
        break;
    case PE_MASTER_TRADER:
        break;
    case PE_EDUCATED:
        PERKDOWN_STAT( ST_UNSPENT_SKILL_POINTS, -= 30 );
        break;
    case PE_HEALER:
        break;
    case PE_BETTER_CRITICALS:
        PERKDOWN_STAT( ST_MAX_CRITICAL, -= 20 );
        break;
    case PE_SLAYER:
        break;
    case PE_SNIPER:
        break;
    case PE_SILENT_DEATH:
        break;
    case PE_ACTION_BOY:
        PERKDOWN_STAT( ST_ACTION_POINTS, -= 2 );
        break;
    case PE_LIFEGIVER:
        PERKDOWN_STAT( ST_MAX_LIFE, -= 15 );
        break;
    case PE_DODGER:
        PERKDOWN_STAT( ST_ARMOR_CLASS, -= 10 );
		PERKDOWN_STAT( ST_AGILITY, -= 1 );
        break;
    case PE_SNAKEATER:
        PERKDOWN_STAT( ST_POISON_RESISTANCE, -= 45 );
		PERKDOWN_STAT( ST_ENDURANCE, -= 1 );
		PERKDOWN_STAT( ST_MAX_LIFE, -= 5 );
        break;
    case PE_MR_FIXIT:
        PERKDOWN_SKILL( SK_REPAIR, -= 30 );
        PERKDOWN_SKILL( SK_SCIENCE, -= 30 );
        break;
    case PE_MEDIC:
        PERKDOWN_SKILL( SK_FIRST_AID, -= 30 );
        PERKDOWN_SKILL( SK_DOCTOR, -= 30 );
        break;
    case PE_MASTER_THIEF:
        PERKDOWN_SKILL( SK_STEAL, -= 20 );
        PERKDOWN_SKILL( SK_LOCKPICK, -= 20 );
        break;
    case PE_SPEAKER:
        PERKDOWN_SKILL( SK_SPEECH, -= 40 );
        break;
    case PE_HEAVE_HO:
        break;
    case PE_PICKPOCKET:
        break;
    case PE_GHOST:
        break;
    case PE_EXPLORER:
        break;
    case PE_PATHFINDER:	/*+25% speed on global per range*/
		PERKDOWN_SKILL( SK_OUTDOORSMAN, -= 20 ); 
		break;
    case PE_SCOUT:      /*This will increase the amount of the map you can see while exploring and make finding the special random encounters a little easier.*/
		PERKDOWN_SKILL( SK_OUTDOORSMAN, -= 20 );
		break;
    case PE_RANGER:
        PERKDOWN_SKILL( SK_OUTDOORSMAN, -= 25 ); /*Fewer hostile random encounters*/ 
		break;
    case PE_QUICK_POCKETS:
        break;
    case PE_SMOOTH_TALKER:
        break;
    case PE_SWIFT_LEARNER:
        break;
    case PE_ADRENALINE_RUSH:
        break;
    case PE_CAUTIOUS_NATURE:
		PERKDOWN_STAT( ST_PERCEPTION, -- );
        break;
    case PE_COMPREHENSION:
        break;
    case PE_DEMOLITION_EXPERT: /*Used in explosion script*/
		PERKDOWN_SKILL( SK_TRAPS, -= 40 );
        break;
    case PE_GAMBLER:
        PERKDOWN_SKILL( SK_GAMBLING, -= 40 );
        break;
    case PE_GAIN_STRENGTH:
        PERKDOWN_STAT( ST_STRENGTH, -- );
        break;
    case PE_GAIN_PERCEPTION:
        PERKDOWN_STAT( ST_PERCEPTION, -- );
        break;
    case PE_GAIN_ENDURANCE:
        PERKDOWN_STAT( ST_ENDURANCE, -- );
        break;
    case PE_GAIN_CHARISMA:
        PERKDOWN_STAT( ST_CHARISMA, -- );
        break;
    case PE_GAIN_INTELLIGENCE:
        PERKDOWN_STAT( ST_INTELLECT, -- );
        break;
    case PE_GAIN_AGILITY:
        PERKDOWN_STAT( ST_AGILITY, -- );
        break;
    case PE_GAIN_LUCK:
        PERKDOWN_STAT( ST_LUCK, -- );
        break;
    case PE_HARMLESS:
        PERKDOWN_SKILL( SK_STEAL, -= 40 );
        break;
    case PE_HERE_AND_NOW:
        break;
    case PE_HTH_EVADE: //Сила красоты
		PERKDOWN_STAT( ST_ARMOR_CLASS, -= 20);
		PERKDOWN_STAT( ST_ACTION_POINTS, -= 2 );
        break;
    case PE_KAMA_SUTRA_MASTER:
        break;
    case PE_KARMA_BEACON:
		PERKDOWN_STAT( ST_MAX_LIFE, -= 8 );
		PERKDOWN_STAT( ST_MELEE_DAMAGE, -= 8 );
		PERKDOWN_STAT( ST_ACTION_POINTS, -= 2 );
        break;
    case PE_LIGHT_STEP:
        break;
    case PE_LIVING_ANATOMY:
        PERKDOWN_SKILL( SK_DOCTOR, -= 20 );
		PERKDOWN_SKILL( SK_SCIENCE, -= 20 );
		PERKDOWN_SKILL( SK_FIRST_AID, -= 20 );
		PERKDOWN_SKILL( SK_MELEE_WEAPONS, -= 20 );
        break;
    case PE_MAGNETIC_PERSONALITY:
		PERKDOWN_STAT( ST_CHARISMA, -= 2);
		PERKDOWN_STAT( ST_ARMOR_CLASS, -= 8);
        PERKDOWN_SKILL( SK_DOCTOR, -= 20 );
		PERKDOWN_SKILL( SK_FIRST_AID, -= 20 );
        break;
    case PE_NEGOTIATOR:
        PERKDOWN_SKILL( SK_SPEECH, -= 20 );
        PERKDOWN_SKILL( SK_BARTER, -= 20 );
        break;
    case PE_PACK_RAT:
        PERKDOWN_STAT( ST_CARRY_WEIGHT, -= LBS_TO_GRAMM( 100 ) );
        break;
    case PE_PYROMANIAC:
        break;
    case PE_QUICK_RECOVERY:
        break;
    case PE_SALESMAN:
        PERKDOWN_SKILL( SK_BARTER, -= 40 );
        break;
    case PE_STONEWALL:
        break;
    case PE_THIEF:
        PERKDOWN_SKILL( SK_SNEAK, -= 10 );
        PERKDOWN_SKILL( SK_LOCKPICK, -= 10 );
        PERKDOWN_SKILL( SK_STEAL, -= 10 );
        PERKDOWN_SKILL( SK_TRAPS, -= 10 );
        break;
    case PE_WEAPON_HANDLING:
        break;
	case PE_FORT_LID_1:				/*Лидер Форта 1 уровень*/
		PERKDOWN_SKILL( SK_UNARMED, -= 50 );
		PERKDOWN_SKILL( SK_MELEE_WEAPONS, -= 50 );
		PERKDOWN_SKILL( SK_SMALL_GUNS, -= 30 );
		PERKDOWN_SKILL( SK_BIG_GUNS, -= 30 );
		PERKDOWN_SKILL( SK_ENERGY_WEAPONS, -= 30 );
		PERKDOWN_SKILL( SK_SPEECH, -= 50 );
		PERKDOWN_SKILL( SK_FIRST_AID, -= 20 );
		PERKDOWN_SKILL( SK_DOCTOR, -= 20 );
		PERKDOWN_SKILL( SK_REPAIR, -= 20 );
		PERKDOWN_SKILL( SK_OUTDOORSMAN, -= 20 );
		PERKDOWN_STAT (ST_CARRY_WEIGHT , -= 10 );
		break;
	case PE_FORT_LID_2:				/*Лидер Форта 2 уровень*/
		PERKDOWN_STAT( ST_STRENGTH, -- );
		PERKDOWN_STAT( ST_PERCEPTION, -- );
		PERKDOWN_STAT( ST_EXPERIENCE, -- );
		PERKDOWN_STAT( ST_CHARISMA, -- );
		PERKDOWN_STAT( ST_INTELLECT, -- );
		PERKDOWN_STAT( ST_AGILITY, -- );
		PERKDOWN_STAT( ST_LUCK, -- );
		break;
	case PE_FORT_LID_3:				/*Лидер Форта 3 уровень*/
		PERKDOWN_STAT( ST_CRITICAL_CHANCE, -=5 );
		PERKDOWN_STAT( ST_MELEE_DAMAGE, -= 5 );
		PERKDOWN_STAT( ST_ACTION_POINTS, -= 1 );
		PERKDOWN_STAT( ST_MAX_LIFE, -= 10 );
		PERKDOWN_STAT( ST_NORMAL_RESIST, -= 5 );
		PERKDOWN_STAT( ST_ELECTRO_RESIST, -= 5 );
		PERKDOWN_STAT( ST_FIRE_RESIST, -= 5 );
		PERKDOWN_STAT( ST_LASER_RESIST, -= 5 );
		PERKDOWN_STAT( ST_PLASMA_RESIST, -= 5 );
        break;
	case PE_ZLO_LID_1:				/*Главный Злодей 1 уровень*/
		PERKDOWN_SKILL( SK_UNARMED, -= 40 );
		PERKDOWN_SKILL( SK_MELEE_WEAPONS, -= 40 );
		PERKDOWN_SKILL( SK_SMALL_GUNS, -= 40 );
		PERKDOWN_SKILL( SK_BIG_GUNS, -= 40 );
		PERKDOWN_SKILL( SK_ENERGY_WEAPONS, -= 40 );
		PERKDOWN_SKILL( SK_FIRST_AID, -= 20 );
		PERKDOWN_SKILL( SK_REPAIR, -= 40 );
		PERKDOWN_SKILL( SK_OUTDOORSMAN, -= 50 );
		PERKDOWN_STAT (ST_CARRY_WEIGHT , -= 30 );
        break;
	case PE_ZLO_LID_2:				/*Главный Злодей 2 уровень*/
		PERKDOWN_STAT( ST_STRENGTH, -- );
		PERKDOWN_STAT( ST_PERCEPTION, -- );
		PERKDOWN_STAT( ST_EXPERIENCE, -- );
		PERKDOWN_STAT( ST_INTELLECT, -- );
		PERKDOWN_STAT( ST_AGILITY, -- );
		PERKDOWN_STAT( ST_LUCK, -- );
        break;
	case PE_ZLO_LID_3:				/*Главный Злодей 3 уровень*/
		PERKDOWN_STAT( ST_CRITICAL_CHANCE, -=5 );
		PERKDOWN_STAT( ST_MELEE_DAMAGE, -= 5 );
		PERKDOWN_STAT( ST_ACTION_POINTS, -= 1 );
		PERKDOWN_STAT( ST_MAX_LIFE, -= 20 );
		PERKDOWN_STAT( ST_NORMAL_RESIST, -= 10 );
		PERKDOWN_STAT( ST_ELECTRO_RESIST, -= 10 );
		PERKDOWN_STAT( ST_FIRE_RESIST, -= 10 );
		PERKDOWN_STAT( ST_LASER_RESIST, -= 10 );
		PERKDOWN_STAT( ST_PLASMA_RESIST, -= 10 );
        break;
    default:
        break;
    }
}
#endif
