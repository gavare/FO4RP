// Author: cvet
#include "_macros.fos"

#ifdef __CLIENT
# include "_client_defines.fos"
# include "_msgstr.fos"

import void SetChosenTabLevelUp( bool enable )  from "chosen_tabs";
import int  GUI_GetActiveScreen() from "client_gui";

import void SetChosenTabHeavyDmg( bool enable ) from "chosen_tabs"; // Export
import void SetChosenTabBullOver( bool enable ) from "chosen_tabs"; // Export
import void SetChosenTabBleed( bool enable ) from "chosen_tabs";    // Export
import void SetChosenTabBldTox( bool enable ) from "chosen_tabs";   // Export
/*import void SetChosenTabOrgDmg( bool enable ) from "chosen_tabs";   // Export */


#endif // __CLIENT

#ifndef __CLIENT
import void PerkUp( Critter& cr, uint perk ) from "perks";
import void PerkDown( Critter& cr, uint perk ) from "perks";
#endif // __CLIENT

#ifdef __SERVER
import void ChangeCritterSpeed( Critter& cr ) from "speed";
#endif // __SERVER

#ifndef __CLIENT
void changedParam_Hp( Critter& cr, uint, int oldValue )
{
    int curHp = cr.StatBase[ ST_CURRENT_HP ];
	if( curHp < 1 && curHp > __DeadHitPoints ) //&& cr.Mode[ MODE_NO_KNOCK ] == 0 //Выпилил, т.к. хуйня, ну ей богу хуйня.
	{
		if( !cr.IsKnockout() )
			cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 0, cr.HexX, cr.HexY );
	}
	
	if( curHp < __DeadHitPoints && !cr.IsDead() ) 
	{
		if( cr.IsPlayer() )
			cr.Say( SAY_NETMSG, "Полученные повреждения слишком обширны. Без медицинского вмешательства вы скоро умрёте." );
		uint anim2Dead = ANIM2_DEAD_FRONT;
		if( cr.IsKnockout() )
		{
			if( cr.Anim2Knockout == ANIM2_IDLE_PRONE_FRONT )
				anim2Dead = ANIM2_DEAD_PRONE_FRONT;
			else
				anim2Dead = ANIM2_DEAD_PRONE_BACK;
		}
		cr.ToDead( anim2Dead, null );
		
		uint killer_id = cr.StatBase[ ST_KILLER_PERSON ];
		if( killer_id > 0 )
		{
			Critter@ killer = GetCritter( killer_id );
			if(valid(killer))
				killer.KillBase[ KILL_BEGIN + cr.Stat[ ST_BODY_TYPE ] ]++;
		}
	}
	
    if( curHp > cr.Stat[ ST_MAX_LIFE ] )
        cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
}

void changedParam_Experience( Critter& cr, uint, int oldValue )
{   
    int luckRoll = Random(1, 15); // luck не может быть выше 10, рандомим до 15 чтобы множитель не вылетал слишком часто
    int luckMultiplier = cr.Stat[ ST_LUCK ] >= luckRoll ? 2 : 1;
    int exp = cr.StatBase[ ST_EXPERIENCE ] - oldValue;
    if( exp > 0 )
    {
        uint level = cr.Stat[ ST_LEVEL ];
        if( level >= __LevelCap && not __LevelCapAddExperience )
            return;

		float bonus_mul = ( cr.Stat[ ST_CHARISMA ] + cr.Stat[ ST_INTELLECT ] / 2 + cr.Stat[ ST_PERCEPTION ] / 2 ) * 0.15;
        
		if( cr.Trait[ TRAIT_SEX_APPEAL ] != 0 )
			bonus_mul += 0.5;
		
		if( cr.Param[ QST_GAMEMODE ] == GAME_TEST )
			cr.Say( SAY_NETMSG, exp + "*" + bonus_mul + "*" + luckMultiplier );
		
		exp *= bonus_mul * luckMultiplier;
		
        cr.StatBase[ ST_EXPERIENCE ] = oldValue + exp;

        if( level >= __LevelCap )
            return;

        int perkUp = ( cr.Trait[ TRAIT_SKILLED ] != 0 ? 4 : 3 );
        while( true )
        {
            if( cr.StatBase[ ST_EXPERIENCE ] >= NextLevelNeedExp( cr ) && level < __LevelCap )
            {
                level++;
                
				cr.StatBase[ ST_LEVEL ]++;

                cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] += 5 + cr.StatBase[ ST_LEVEL ] * cr.StatBase[ ST_INTELLECT ]; // Skill points

                if( ( level % perkUp ) == 0 )
                {
                    cr.StatBase[ ST_UNSPENT_PERKS ] ++;
                }
            }
            else
                break;
        }
    }
}

void changedParam_Perks( Critter& cr, uint perk, int oldValue )
{
    int curValue = cr.Param[ perk ];
    if( curValue > oldValue )
        for( uint i = 0, j = curValue - oldValue; i < j; i++ )
            PerkUp( cr, perk );
    else if( curValue < oldValue )
        for( uint i = 0, j = oldValue - curValue; i < j; i++ )
            PerkDown( cr, perk );
}

void changedParam_Hide( Critter& cr, uint, int oldValue )
{
    cr.RefreshVisible();
}

void changedParam_FastShot( Critter& cr, uint, int oldValue )
{
//    cr.ModeBase[ MODE_NO_AIM ] = ( cr.Trait[ TRAIT_FAST_SHOT ] != 0 ? 1 : 0 );
}

int NextLevelNeedExp( Critter& cr ) // Export
{
    int level = cr.Stat[ ST_LEVEL ];
    return NUMERICAL_NUMBER( level ) * 1000;
}

int getParamDialog_Intellect( Critter@ master, Critter@ slave, uint index )
{
    if( valid( master ) )
        return master.Stat[ ST_INTELLECT ] + 2 * master.Perk[ PE_SMOOTH_TALKER ];
    return 0;
}

int getParamDialog_Reputation( Critter@ master, Critter@ slave, uint index )
{
    if( valid( master ) )
    {
        if( master.ReputationBase[ index ] == int(0x80000000) )
            master.ReputationBase[ index ] = 0;
        return master.ReputationBase[ index ];
    }
    return 0;
}
#endif

#ifdef __CLIENT
void changedParam_Level( CritterCl& cr, uint, int oldValue )
{
    if( cr.ParamBase[ ST_LEVEL ] > oldValue )
    {
        PlaySound( "LEVELUP.ACM" );
        Message( TEXTMSG_GAME, STR_GAIN_LEVELUP, FOMB_GAME );
        SetChosenTabLevelUp( true );
    }
}

void changedParam_Experience( CritterCl& cr, uint, int oldValue )
{
    int curValue = cr.ParamBase[ ST_EXPERIENCE ];
    if( curValue > oldValue )
        Message( ReplaceText( GetMsgStr( TEXTMSG_GAME, STR_GAIN_EXPERIENCE ), "VALUE", curValue - oldValue ), FOMB_GAME );
}

void changedParam_UnspentPerks( CritterCl& cr, uint, int oldValue )
{
    if( cr.ParamBase[ ST_UNSPENT_PERKS ] > 0 && GUI_GetActiveScreen() == CLIENT_SCREEN_CHARACTER )
        ShowScreen( CLIENT_SCREEN_PERK, 0, 0, 0 );
}

void changedParam_CritterStatus( CritterCl& cr, uint, int oldValue ) // pm added
{
    SetChosenTabHeavyDmg( FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG ) ? true : false );
    SetChosenTabBullOver( FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER ) ? true : false );
    SetChosenTabBleed( FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BLEED ) ? true : false );
    SetChosenTabBldTox( FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BLOOD_TOXIC ) ? true : false );
/*	SetChosenTabOrgDmg( FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_ORG_DMG ) ? true : false );*/
}
#endif

#ifdef __SERVER

import void InjureCritter( Critter& cr, uint dmg, uint dmgType, uint8 dir, uint attackerId ) from "combat";

void changedParam_Hunger( Critter& cr, uint, int oldValue )
{
    cr.StatBase[ ST_HUNGER ] = CLAMP( cr.StatBase[ ST_HUNGER ], 0, 100 );

    if( cr.StatBase[ ST_HUNGER ] <= 0 && !cr.IsDead() && !cr.IsKnockout() ) {
		cr.StatBase[ ST_CURRENT_HP ] -= ( cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ] ) / 3;
		cr.Say( SAY_NETMSG, "Вы страдаете от голода." );
	}
}

void changedParam_Thrist( Critter& cr, uint, int oldValue )
{
    cr.StatBase[ ST_THRIST ] = CLAMP( cr.StatBase[ ST_THRIST ], 0, 100 );

    if( cr.StatBase[ ST_THRIST ] <= 0 && !cr.IsDead() && !cr.IsKnockout() ) {
		cr.StatBase[ ST_THRIST ] -= ( cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ] ) / 3;
		cr.Say( SAY_NETMSG, "Вы страдаете от жажды." );
	}
}

void changedParam_Dyspnea( Critter& cr, uint, int oldValue )
{
	if( !cr.IsPlayer() ) return; //Животные не задыхаются.
	
    cr.StatBase[ ST_DYSPNEA ] = CLAMP( cr.StatBase[ ST_DYSPNEA ], 0, 100 );

    if( cr.StatBase[ ST_DYSPNEA ] <= 25 && !cr.IsDead() )
    {
		cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 1 ? true : false ) ), 20, cr.HexX, cr.HexY );
        cr.Say( SAY_EMOTE_ON_HEAD, "Обессиленно падает" );
		cr.Say( SAY_NETMSG, "Ваши лёгкие забиты, дышать почти нечем." );
		cr.StatBase[ DYS ] += 1;
		cr.StatBase[ ST_CURRENT_HP ] -= 5;
		if( cr.StatBase[ DYS ] >= 30 && cr.StatBase[ ST_DYSPNEA ] <= 0 )
		{
			cr.StatBase[ ST_CURRENT_HP ] -= 10;
			cr.Say( SAY_EMOTE_ON_HEAD, "Задыхается" );
			cr.Say( SAY_NETMSG, "В организм не поступает кислород, вам нужно срочно очистить лёгкие!" );
		}
	}
	else if( cr.StatBase[ ST_DYSPNEA ] >= 26 && cr.StatBase[ ST_DYSPNEA ] <= 70 )
	{
		cr.StatBase[ DYS ] = 0;
		cr.Say( SAY_EMOTE_ON_HEAD, ( Random( 0, 4 ) == 0 ? "Кашель" : "Тяжело дышит" ) );
		cr.StatBase[ ST_CURRENT_HP ] -= 1;
	}
	else if( cr.StatBase[ ST_DYSPNEA ] >= 71 && cr.StatBase[ ST_DYSPNEA ] <= 99 )
	{
		cr.StatBase[ DYS ] = 0;
		if( Random( 0, 4 ) == 0 )
			cr.Say( SAY_EMOTE_ON_HEAD, "Кашель" );
	}			
}

/*import void FlushScreen( Critter& cr, uint fromColor, uint toColor, uint timeMs ) from "effects";
void HP( Critter& cr )
{
    if( cr.StatBase[ ST_CURRENT_HP ] >= 1 )
	{
	    cr.StatBase[ ST_CURRENT_HP ] ++;
		cr.Say(SAY_EMOTE_ON_HEAD, "Шатается");
		FlushScreen( cr, COLOR_BLACK, COLOR_BLACK, 10000 );
	}
	return ( 60 * 1 * __TimeMultiplier );
}*/

void changedParam_SpeedMod( Critter& cr, uint, int oldValue )
{
    ChangeCritterSpeed( cr );
}
#endif // __SERVER

/*#ifdef __CLIENT Good/Evil system, not used
   #include "_colors.fos"

   void changedParam_GoodEvilList(CritterCl& chosen, uint index, int oldValue)
   {
        if(chosen.IsChosen())
        {
                if(oldValue!=0)
                {
                        int id=oldValue&0x7FFFFFFF;
                        CritterCl@ cr=::GetCritter(id);
                        if(valid(cr))
                        {
                                cr.NameColor=COLOR_CRITTER_NAME;
                                cr.ContourColor=COLOR_CONTOUR_YELLOW;
                        }
                }

                if(chosen.GoodEvilList[index]!=0)
                {
                        int id=chosen.GoodEvilList[index];
                        bool isEvil=FLAG(id,0x80000000);
                        if(isEvil) id^=0x80000000;
                        CritterCl@ cr=::GetCritter(id);
                        if(valid(cr))
                        {
                                cr.NameColor=(isEvil?COLOR_RED:COLOR_GREEN);
                                cr.ContourColor=(isEvil?COLOR_CONTOUR_RED:COLOR_CONTOUR_GREEN);
                        }
                }
        }
   }
 #endif*/


// Parameters generation
// For server and client
// Both generation need be equal
// Input for player: 7 special, 3 tag skills, 2 traits, age, gender
// Imput for npc: data from prototype
#ifndef __CLIENT
# define _param_    cr.ParamBase
void CritterGenerate( Critter& cr ) // Export to main@critter_init
#endif
#ifdef __CLIENT
# define _param_    data
void CritterGenerate( int[]& data ) // Export to client_main@player_data_generate
#endif
{
    if( _param_[ ST_LEVEL ] <= 0 )
        _param_[ ST_LEVEL ] = 1;

    if( _param_[ TRAIT_SMALL_FRAME ] != 0 )
        _param_[ ST_AGILITY ] += 1;
    if( _param_[ TRAIT_BRUISER ] != 0 )
        _param_[ ST_STRENGTH ] += 2;
    if( _param_[ TRAIT_GOOD_NATURED ] != 0 )
    {
        _param_[ SK_FIRST_AID ] += 25;
        _param_[ SK_DOCTOR ] += 25;
        _param_[ SK_SPEECH ] += 25;
        _param_[ SK_BARTER ] += 25;
        _param_[ SK_SMALL_GUNS ] -= 20;
        _param_[ SK_BIG_GUNS ] -= 20;
        _param_[ SK_ENERGY_WEAPONS ] -= 20;
        _param_[ SK_UNARMED ] -= 20;
        _param_[ SK_MELEE_WEAPONS ] -= 20;
        _param_[ SK_THROWING ] -= 20;
    }
    if( _param_[ TRAIT_SKILLED ] != 0 )
    {
		for( uint i = SK_SMALL_GUNS; i <= SK_OUTDOORSMAN; i++ )
			_param_[ i ] += 10;
	}
    // if(_param_[TRAIT_GIFTED]!=0)
    // {
    //	for(uint i=ST_STRENGTH;i<=ST_LUCK;i++) _param_[i]++;
    //	for(uint i=SKILL_BEGIN;i<=SKILL_END;i++) _param_[i]-=10;
    // }

    _param_[ SK_SMALL_GUNS ] += 40 + 6 * _param_[ ST_AGILITY ];
    _param_[ SK_BIG_GUNS ] += 20 + 3 * _param_[ ST_AGILITY ];
    _param_[ SK_ENERGY_WEAPONS ] += 20 + 3 * _param_[ ST_AGILITY ];
    _param_[ SK_UNARMED ] += 40 + 4 * ( _param_[ ST_AGILITY ] + _param_[ ST_STRENGTH ] );
    _param_[ SK_MELEE_WEAPONS ] += 20 + 4 * ( _param_[ ST_AGILITY ] + _param_[ ST_STRENGTH ] );
    _param_[ SK_THROWING ] += 20 + 6 * _param_[ ST_AGILITY ];
    _param_[ SK_FIRST_AID ] += 20 + 5 * ( _param_[ ST_PERCEPTION ] + _param_[ ST_INTELLECT ] );
    _param_[ SK_DOCTOR ] += 20 + 4 * ( _param_[ ST_PERCEPTION ] + _param_[ ST_INTELLECT ] );
    _param_[ SK_SNEAK ] += 20 + 5 * _param_[ ST_AGILITY ];
    _param_[ SK_LOCKPICK ] += 10 + 4 * ( _param_[ ST_PERCEPTION ] + _param_[ ST_AGILITY ] );
    _param_[ SK_STEAL ] += 0 + 10 * _param_[ ST_AGILITY ];
    _param_[ SK_TRAPS ] += 10 + 4 * ( _param_[ ST_PERCEPTION ] + _param_[ ST_AGILITY ] );
    _param_[ SK_SCIENCE ] += 20 + 8 * _param_[ ST_INTELLECT ];
    _param_[ SK_REPAIR ] += 20 + 6 * _param_[ ST_INTELLECT ];
    _param_[ SK_SPEECH ] += 40 + 6 * _param_[ ST_CHARISMA ];
    _param_[ SK_BARTER ] += 40 + 8 * _param_[ ST_CHARISMA ];
    _param_[ SK_GAMBLING ] += 20 + 8 * _param_[ ST_LUCK ];
    _param_[ SK_OUTDOORSMAN ] += 40 + 5 * ( _param_[ ST_ENDURANCE ] + _param_[ ST_INTELLECT ] );

    if( _param_[ TAG_SKILL1 ] != 0 )
        _param_[ _param_[ TAG_SKILL1 ] ] += 50;                      // Roleplay
    if( _param_[ TAG_SKILL2 ] != 0 )
        _param_[ _param_[ TAG_SKILL2 ] ] += 40;                      // Roleplay
    if( _param_[ TAG_SKILL3 ] != 0 )
        _param_[ _param_[ TAG_SKILL3 ] ] += 30;                      // Roleplay

    if( _param_[ TRAIT_FAST_METABOLISM ] != 0 )
    {
        _param_[ ST_RADIATION_RESISTANCE ] -= _param_[ ST_ENDURANCE ] * 2;
        _param_[ ST_POISON_RESISTANCE ] -= _param_[ ST_ENDURANCE ] * 5;
        _param_[ ST_HEALING_RATE ] += _param_[ ST_ENDURANCE ];
    }
    if( _param_[ TRAIT_BRUISER ] != 0 )
        _param_[ ST_ACTION_POINTS ] -= 2;
    if( _param_[ TRAIT_KAMIKAZE ] != 0 )
    {
        _param_[ ST_ARMOR_CLASS ] -= _param_[ ST_AGILITY ];
        _param_[ ST_SEQUENCE ] += 25;
    }
    if( _param_[ TRAIT_HEAVY_HANDED ] != 0 )
        _param_[ ST_MELEE_DAMAGE ] += 10;
    if( _param_[ TRAIT_FINESSE ] != 0 )
        _param_[ ST_CRITICAL_CHANCE ] += 10;
    if( _param_[ TRAIT_HEAVY_HANDED ] != 0 )
        _param_[ ST_MAX_CRITICAL ] -= 30;
    //if( _param_[ TRAIT_FAST_SHOT ] != 0 )
    //    _param_[ MODE_NO_AIM ] = 1;

    #ifdef __CLIENT
    // Runtime calculations, only for client registration
    _param_[ ST_ARMOR_CLASS ] += _param_[ ST_AGILITY ] * 5;
//	_param_[ST_MAX_LIFE]+=_param_[ST_STRENGTH]+_param_[ST_ENDURANCE]*2; //Roleplay
//	_param_[ST_MAX_LIFE]+=_param_[ST_ENDURANCE]*22; //combat system
    _param_[ ST_MAX_LIFE ] += _param_[ ST_STRENGTH ] * 8 + _param_[ ST_ENDURANCE ] * 12;
    _param_[ ST_ACTION_POINTS ] += _param_[ ST_AGILITY ] + 2;
    _param_[ ST_CARRY_WEIGHT ] += LBS_TO_GRAMM( 25 + _param_[ ST_STRENGTH ] * ( 25 - _param_[ TRAIT_SMALL_FRAME ] * 10 ) );
    _param_[ ST_MELEE_DAMAGE ] += _param_[ ST_STRENGTH ] * 2;
    _param_[ ST_POISON_RESISTANCE ] += _param_[ ST_ENDURANCE ] * 5;
    _param_[ ST_RADIATION_RESISTANCE ] += _param_[ ST_ENDURANCE ] * 2;
    _param_[ ST_SEQUENCE ] += _param_[ ST_PERCEPTION ] * 3;
    _param_[ ST_HEALING_RATE ] += _param_[ ST_ENDURANCE ];
    _param_[ ST_CRITICAL_CHANCE ] += _param_[ ST_LUCK ] * 2;
    #endif

//	_param_[ST_MAX_LIFE]+=LIFEBONUS; //Roleplay
//	_param_[ST_MAX_LIFE]+=0; //combat system
    //_param_[ ST_ACTION_POINTS ] += 2;
    _param_[ ST_CURRENT_HP ] = _param_[ ST_MAX_LIFE ];
    _param_[ ST_CURRENT_AP ] = _param_[ ST_ACTION_POINTS ] * 100;
    _param_[ ST_EXPERIENCE_MULTIPLIER ] = 1;

    _param_[ ST_HUNGER ] = 100;
    _param_[ ST_THRIST ] = 100;
    _param_[ ST_DYSPNEA ] = 100;
    _param_[ ST_SPEED_MOD ] = 100;
	_param_[ P_PSI_MAX ] = 60 + _param_[ ST_INTELLECT ]*5 + _param_[ ST_CHARISMA ]*2;
}

#ifdef __CLIENT
# include "_msgstr.fos"

# define STR_WRONG_GENDER    ( 324 )
// Check valid of input data
bool CritterGenerateCheck( int[]& data ) // Export to client_main@player_data_check
{
    // Check special
    int special = 0;
    for( uint i = ST_STRENGTH; i <= ST_LUCK; i++ )
    {
        if( data[ i ] < 1 || data[ i ] > 10 )
        {
            Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_SPECIAL ) );
            return false;
        }
        special += data[ i ];
    }
    if( special != __StartSpecialPoints )
    {
        Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_SPECIAL ) );
        return false;
    }

    // Check choosed tag skills
    if( ( data[ TAG_SKILL1 ] < int(SKILL_BEGIN) || data[ TAG_SKILL1 ] > int(SKILL_END) ) ||
        ( data[ TAG_SKILL2 ] < int(SKILL_BEGIN) || data[ TAG_SKILL2 ] > int(SKILL_END) ) ||
        ( data[ TAG_SKILL3 ] < int(SKILL_BEGIN) || data[ TAG_SKILL3 ] > int(SKILL_END) ) )
    {
        Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_TAGSKILL ) );
        return false;
    }

    // girl
    // 33 34 35 36 37 38 61 63 73 74 83 94
    if( data[ ST_GENDER ] == 0 )
    {
        if( ( ( data[ ST_BODY_TYPE ] >= 33 && data[ ST_BODY_TYPE ] <= 38 ) || data[ ST_BODY_TYPE ] == 61 || data[ ST_BODY_TYPE ] == 63 || data[ ST_BODY_TYPE ] == 73 || data[ ST_BODY_TYPE ] == 74 || data[ ST_BODY_TYPE ] == 83 || data[ ST_BODY_TYPE ] == 94 ) )
        {
            Message( GetMsgStr( TEXTMSG_GAME, STR_WRONG_GENDER ) );
            return false;
        }
    }
    else
    {
        if( data[ ST_BODY_TYPE ] == 31 || ( data[ ST_BODY_TYPE ] >= 39 && data[ ST_BODY_TYPE ] <= 45 ) || data[ ST_BODY_TYPE ] == 48 || data[ ST_BODY_TYPE ] == 56 || data[ ST_BODY_TYPE ] == 57 || data[ ST_BODY_TYPE ] == 62 || data[ ST_BODY_TYPE ] == 64 || data[ ST_BODY_TYPE ] == 72  || data[ ST_BODY_TYPE ] == 77 ||
            data[ ST_BODY_TYPE ] == 78 || data[ ST_BODY_TYPE ] == 82 || data[ ST_BODY_TYPE ] == 84 || data[ ST_BODY_TYPE ] == 87 || data[ ST_BODY_TYPE ] == 88 || data[ ST_BODY_TYPE ] == 89 || data[ ST_BODY_TYPE ] == 91 || data[ ST_BODY_TYPE ] == 92 || data[ ST_BODY_TYPE ] == 93 || data[ ST_BODY_TYPE ] == 96 || data[ ST_BODY_TYPE ] == 98 )
        {
            Message( GetMsgStr( TEXTMSG_GAME, STR_WRONG_GENDER ) );
            return false;
        }
    }

    if( data[ ST_BODY_TYPE ] == 0 )
        data[ ST_BODY_TYPE ] = ( data[ ST_GENDER ] == 0 ? 62 : 61 );
    // guys
    // 98 96 93 92 91 89 88 87 84 82 78 77 72 64 62 57 56 48 45 44 43 42 41 40 39 31

    return true;
}
#endif

#ifndef __CLIENT
void NpcProcessLevel( Critter& npc ) // Export
{
    for( int i = 0, j = npc.Stat[ ST_LEVEL ]; i < j; i++ )
    {
        // Todo: ...
        // npc.StatBase[ST_MAX_LIFE]+=10;
    }
}
#endif

#ifdef __CLIENT
# define Critter    CritterCl
#endif

int getParam_MaxLife( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_MAX_LIFE ] + cr.StatBase[ ST_MAX_LIFE_EXT ] + cr.Stat[ ST_STRENGTH ] * 8 + cr.Stat[ ST_ENDURANCE ] * 12; // Roleplay */
    return CLAMP( val, 1, 9999 );
}

int getParam_MaxAp( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_ACTION_POINTS ] + cr.StatBase[ ST_ACTION_POINTS_EXT ] + cr.Stat[ ST_AGILITY ] + 2;
	if( cr.Timeout[ TO_BATTLE ] <= 0 )
		val += cr.Stat[ ST_AGILITY ];
    return CLAMP( val, 1, 9999 );
}

int getParam_Sequence( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_SEQUENCE ] + cr.StatBase[ ST_SEQUENCE_EXT ] + cr.Stat[ ST_PERCEPTION ] * 3;
    return CLAMP( val, 0, 9999 );
}

int getParam_MeleeDmg( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_MELEE_DAMAGE ] + cr.StatBase[ ST_MELEE_DAMAGE_EXT ] + cr.Stat[ ST_STRENGTH ] * 2;
    return CLAMP( val, 1, 9999 );
}

int getParam_HealingRate( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_HEALING_RATE ] + cr.StatBase[ ST_HEALING_RATE_EXT ] + cr.Stat[ ST_ENDURANCE ];
    return CLAMP( val, 0, 9999 );
}

int getParam_CriticalChance( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_CRITICAL_CHANCE ] + cr.StatBase[ ST_CRITICAL_CHANCE_EXT ] + cr.Stat[ ST_LUCK ] * 2;
    return CLAMP( val, 0, 100 );
}