#include "_macros.fos"
#include "_msgstr.fos"

#include "_ltp.fos"

bool ltp_inited = false;
void ltp_init () {
	LTPREG (LTP_ROBOT_REPAIR, process_robot_repair)
	ltp_inited = true;
}

import void ChangeStatus( Critter& cr, uint16 status, uint8 value, bool set ) from "critter_status";

bool TryRepairItem( Critter& cr, Item& item ) // Export
{
    if( not item.IsDeteriorable() )
        return true;

    if( cr.Timeout[ TO_BATTLE ] > 0 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_TIMEOUT_BATTLE_WAIT );
        return true;
    }

    if( cr.Timeout[ TO_SK_REPAIR ] > 0 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS );
        return true;
    }

    if( FLAG( item.BrokenFlags, BI_ETERNAL ) || FLAG( item.BrokenFlags, BI_NOTRESC ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_NO_RESC );
        return true;
    }

    // Repair
    int    repair = cr.Skill[ SK_REPAIR ];
    uint8  mode = 0;
    uint16 activePid = cr.GetSlotProto( SLOT_HAND1, mode ).ProtoId;

	
	bool isItemCased = true; // pm add temprorary
	
    // запчасти для оружия и брони ErlKing
    int  type = item.GetProtoId();
	
	uint16[] tools;
	uint16[] parts;	
	
	
	
    switch( type )
    {
    case PID_SANDROBE:
    case PID_PURPLE_ROBE:
    case PID_BLACK_ROBE:
    case PID_JUMPSUIT:
    case PID_FAKE_JUMPSUIT:
        repair += 50;
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 1 );
        break;		
    case PID_LEATHER_JACKET:
        repair += 25;
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 1 );
        break;
    case PID_LEATHER_ARMOR:
        repair += 20;
    case PID_CURED_LEATHER_ARMOR:
        repair += 20;
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 3 );
        break;
    case PID_LEATHER_ARMOR_MK_II:
        repair += 15;
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 );
        break;
    case PID_LEATHER_ARMOR_MK_III:
	case ITEM_TREASURE_HOLE:
        repair += 15;
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 6 );
        break;
    case PID_CURED_LEATHER_ARMOR_MK_II:
		tools.insertLast( PID_SLEDGEHAMMER );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 1 );		
		parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 );
		break;	
    case PID_METAL_ARMOR:
		tools.insertLast( PID_SLEDGEHAMMER );
		parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 );
		break;
    case PID_METAL_ARMOR_MK_II:
        repair -= 25;
		tools.insertLast( PID_SUPER_TOOL_KIT );
		parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 1 );
        break;
    case PID_MANTIS_ARMOUR:
        repair -= 25;
		parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 2 );
        break;
		
	case PID_EKZO:
	case PID_EKZO_2:
	case PID_EKZO_3:
		repair -=50;
		tools.insertLast( PID_SUPER_TOOL_KIT );
		tools.insertLast( PID_WELDING );
		parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 2 );
		parts.insertLast( PID_PB_PLATE ); parts.insertLast( 2 );	
		parts.insertLast( PID_WELDING ); parts.insertLast( 1 );
		break;
    case PID_MIRELURK_ARMOR:
		repair -=50;
		tools.insertLast( PID_WORKBENCH_TOKEN );
		tools.insertLast( PID_MULTI_TOOL );
		tools.insertLast( PID_SLEDGEHAMMER );
		tools.insertLast( PID_SHIV );
		parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 );
		parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 4 );
		parts.insertLast( PID_ROPE ); parts.insertLast( 1 );
		break;
	case PID_POLICE_ARMOR:
	case PID_TESLA_ARMOR:
        repair -= 50;
		tools.insertLast( PID_SUPER_TOOL_KIT );
		tools.insertLast( PID_WELDING );
		parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 3 );
		parts.insertLast( PID_PB_PLATE ); parts.insertLast( 3 );
        break;
	/*case PID_CASER:
	case PID_CADES:
	case PID_CARED:
    case PID_COMBAT_ARMOR:
    case PID_COMBAT_ARMOR_MK_II:
    case PID_BLACK_COMBAT_ARMOR:
    case PID_BROTHERHOOD_COMBAT_ARMOR:
        repair -= 50;
		tools.insertLast( PID_WORKBENCH_TOKEN );		
		parts.insertLast( PID_CHEMICALS ); parts.insertLast( 4 );
		parts.insertLast( PID_IRON_PLATE ); parts.insertLast( 2 );
		parts.insertLast( PID_PB_PLATE ); parts.insertLast( 2 );
        break;
    case PID_POWERED_ARMOR:
    case PID_HARDENED_POWER_ARMOR:
    case PID_ADVANCED_POWER_ARMOR:
    case PID_ADVANCED_POWER_ARMOR_MK2:
        repair -= 100;
		tools.insertLast( PID_WORKBENCH_TOKEN );
		parts.insertLast( PID_HY_MAG_PART ); parts.insertLast( 20 );
        break;*/

// оружие совсем лоу тек
    case PID_SPEARTHROWER1:
    case PID_SPEARTHROWER2:
    case PID_REVOLVER_LOW:
    case PID_PISTOL_LOW:
    case PID_BIGGUN_LOW:
    case PID_SMOKE_GUN_LOW:
    case PID_SHOTPISTOL_LOW:
        repair += 50;
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );
        break;

// оружие лоу тек
    case PID_QUADRO_SHOTGUN:
    case PID_LOW_SNIPER2:
    case PID_SHOTGUN:
        repair += 20;
    case PID_SAWED_OFF_SHOTGUN:
    case PID_10MM_PISTOL:
        repair += 30;
    case PID_GECKO_LOW:
    case PID_REV_RIFLE_LOW:
        repair += 30;
    case PID_FLAMER:
    case PID_ONEHAND_ROCKET_LAUNCHER:
    case PID_AUTOGUN_LOW:
    case PID_SAWGUN_LOW:
    case PID_GATLING_LOW:
    case PID_SNIPER_GUN_LOW:
    case PID_NEEDLER_PISTOL:
    case PID_DOUBLE_RIFLE:
    case PID_DRUM_GUN_LOW:
        repair -= 30;
		tools.insertLast( PID_SUPER_TOOL_KIT );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );		
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );
        break;

// оружие среднее
    case PID_9MM_MAUSER:
    case PID_MAUSER_SMG:
    case PID_COMBAT_SHOTGUN:
        repair -= 15;
    case PID_SCOPED_HUNTING_RIFLE:
        repair -= 5;
    case PID_REMINGTON:
    case PID_10MM_SMG:
    case PID_TOMMY_GUN:
    case PID_GREASE_GUN:
        repair -= 10;
    case PID_HUNTING_RIFLE:
    case PID_14MM_PISTOL:
    case PID_ANACONDA:
        repair -= 15;
    case PID_DESERT_EAGLE:
    case PID_DESERT_EAGLE_EXT_MAG:
    case PID_44_MAGNUM_REVOLVER:
    case PID_44_MAGNUM_SPEEDLOADER:
        repair -= 5;
		tools.insertLast( PID_SUPER_TOOL_KIT );
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 1 );
        break;		
		
// оружие энерго лоу
    case PID_SOLAR_SCORCHER:
        repair -= 30;
    case PID_SOUND_BLASTER:
    case PID_LASER_PISTOL_LOW:
    case PID_LASER_PISTOL_LOW2:
    case PID_LASER_RIFLE_LOW:
    case PID_PLASMA_SMG_LOW:
        repair -= 10;
		tools.insertLast( PID_SUPER_TOOL_KIT );
		parts.insertLast( PID_CRAFT_E_LAMP ); parts.insertLast( 4 );
        break;

// оружие энерго хай
    case PID_PLASMA_RIFLE:
        repair -= 10;
    case PID_PLASMA_PISTOL:
        repair -= 10;
    case PID_LASER_RIFLE:
        repair -= 10;
    case PID_MAGNETO_LASER_PISTOL:
        repair -= 10;
    case PID_LASER_PISTOL:
	case PID_SUN:
	case PID_SUN2:
	case PID_SUN3:
        repair -= 30;
		tools.insertLast( PID_SUPER_TOOL_KIT );
		parts.insertLast( PID_CRAFT_E_PART ); parts.insertLast( 4 );		
		parts.insertLast( PID_CRAFT_E_CHIP ); parts.insertLast( 4 );
        break;

// оружие высокого класса
    case PID_HK_CAWS:
    case PID_PANCOR_JACKHAMMER:
    case PID_HK_P90C:
    case PID_IMPROVED_FLAMETHROWER:
    case PID_MINIGUN:
    case PID_AVENGER_MINIGUN:
    case PID_BOZAR:
    case PID_LIGHT_SUPPORT_WEAPON:
    case PID_M60:
    case PID_GRENADELAUNCHER:
        repair -= 70;
		tools.insertLast( PID_SUPER_TOOL_KIT );
		parts.insertLast( PID_CRAFT_M_STEL ); parts.insertLast( 10 );
        break;

    default:
		cr.Say( SAY_NETMSG, "Не ремонтируемо" ); return true;   // unrepairable
    }

	if ( tools.length()>0 || parts.length()>0 )
		{
		bool NoTools = false;
		bool NoParts = false;
	    for( uint8 j = 0; j < tools.length(); j++ )
			{
			if( cr.CountItem( tools[j] ) == 0 ) NoTools = true;
			}
		for( uint8 jj = 0; jj < parts.length(); jj+=2 )
			{
			if( cr.CountItem( parts[jj] ) < parts[jj+1] ) NoParts = true;
			}			
		
		if ( NoTools || NoParts )
		{
			if( tools.length() > 0 )
				cr.Say( SAY_NETMSG, "Необходимый инструмент:" );
			for( uint8 i = 0; i < tools.length(); i++ )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, 100*tools[i] );
			}	
		
			if( parts.length() > 0 )
				cr.Say( SAY_NETMSG, "Требуемые части для ремонта:" );
			for( uint8 ii = 0; ii < parts.length(); ii+=2 )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, 100*parts[ii] );
				cr.Say( SAY_NETMSG, parts[ii+1] + " шт." );
			}	
			
			return true;
		}
		else
			{
			for( uint8 iii = 0; iii < parts.length(); iii+=2 )
				{
				cr.DeleteItem( parts[iii], parts[iii+1] );
				}		
			}
		}
		
    if( FLAG( item.BrokenFlags, BI_BROKEN ) )
    {
        if( FLAG( item.BrokenFlags, BI_HIGHBROKEN ) )
            repair -= 100;                               // было 150
        else if( FLAG( item.BrokenFlags, BI_NORMBROKEN ) )
            repair -= 75;                                // было 100
        else if( FLAG( item.BrokenFlags, BI_LOWBROKEN ) )
            repair -= 25;                                // было 50

        repair -= item.BrokenCount * 50 / MAX_BROKENS;   // было 100
        repair = CLAMP( repair, 6, 95 );

        if( repair >= Random( 1, 100 ) )
        {
            item.Deterioration = 0;
            UNSETFLAG( item.BrokenFlags, BI_BROKEN );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_REPAIR_SUCC );
            cr.StatBase[ ST_EXPERIENCE ] += 40;
        }
        else
        {
            item.BrokenCount++;
            if( item.BrokenCount >= MAX_BROKENS )
                SETFLAG( item.BrokenFlags, BI_NOTRESC );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_REPAIR_FAIL );
        }
    }
    // Service
    else
    {
        if( FLAG( item.BrokenFlags, BI_SERVICE ) )
            repair -= 25;
        repair -= item.BrokenCount * 50 / MAX_BROKENS;
        repair = CLAMP( repair, 6, 95 );

        if( repair >= Random( 1, 100 ) )
        {
            SETFLAG( item.BrokenFlags, BI_SERVICE );
            if( activePid == PID_OIL_CAN )
            {
                item.Deterioration = 0;
                cr.DeleteItem( PID_OIL_CAN, 1 );
            }
            else
            {
                int cnt = repair * MAX_DETERIORATION / 100;
                if( cnt > item.Deterioration )
                    item.Deterioration = 0;
                else
                    item.Deterioration -= cnt;
            }
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_SERVICE_SUCC );
            cr.StatBase[ ST_EXPERIENCE ] += 20;
        }
        else
        {
            DeteriorateItem( cr, item, MAX_DETERIORATION / 5 );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_SERVICE_FAIL );
        }
    }
    // из СДК
    // SetItemCost(item);
    item.Update();
    cr.TimeoutBase[ TO_SK_REPAIR ] = REPAIR_TIMEOUT( cr );
    return true;
}

void DeteriorateItem( Critter& cr, Item& item, int deteriorationCount ) // Export
{
    if( deteriorationCount <= 0 || not item.IsDeteriorable() || FLAG( item.BrokenFlags, BI_ETERNAL ) || FLAG( item.BrokenFlags, BI_BROKEN ) )
        return;

    item.Deterioration += deteriorationCount;
    if( item.Deterioration >= MAX_DETERIORATION )
    {
        item.Deterioration = MAX_DETERIORATION;
        if( !IsHaveBlade( item.GetProtoId() ) )     // pm added
        {
            item.BrokenCount++;

            // из сдк
            // SetItemCost(item);

            int brokenLvl = Random( 0, item.BrokenCount / ( MAX_BROKENS / 4 ) );

            if( item.BrokenCount >= MAX_BROKENS || brokenLvl >= 3 )
                SETFLAG( item.BrokenFlags, BI_NOTRESC );
            else if( brokenLvl == 2 )
                SETFLAG( item.BrokenFlags, BI_HIGHBROKEN );
            else if( brokenLvl == 1 )
                SETFLAG( item.BrokenFlags, BI_NORMBROKEN );
            else
                SETFLAG( item.BrokenFlags, BI_LOWBROKEN );
        }
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_WEAPON_BROKEN );
    }

    item.Update();
}

void SetDeterioration( Item& item, int deteriorationProcent ) // Export
{
    if( not item.IsDeteriorable() )
        return;
    UNSETFLAG( item.BrokenFlags, BI_BROKEN );
    deteriorationProcent = CLAMP( deteriorationProcent, 0, 100 );
    item.Deterioration = MAX_DETERIORATION * deteriorationProcent / 100;
    item.BrokenCount = MAX_BROKENS * deteriorationProcent / 100;
    if( deteriorationProcent == 100 )
        SETFLAG( item.BrokenFlags, BI_BROKEN );
    item.Update();
}

int GetDeteriorationProcent( Item& item ) // Export
{
    if( not item.IsDeteriorable() )
        return 0;
    if( FLAG( item.BrokenFlags, BI_BROKEN ) )
        return 100;
    int value = item.Deterioration * 100 / MAX_DETERIORATION;
    return CLAMP( value, 0, 100 );
}

/* из СДК, проверить есть ли конфликты с нашим динамическим рассчетом
   void SetItemCost(Item& item)
   {
        //item.Cost = item.Proto.Cost * CLAMP(100 - GetDeteriorationProcent(item), 5, 100)/ 100;
        int wearPercent = GetDeteriorationProcent(item);
        if (wearPercent == 100)
        {
                item.Cost = uint(item.Proto.Cost / 3);
        }
        else if (wearPercent > 75)
        {
                item.Cost = uint(2 * item.Proto.Cost / 3);
        }
        else
        {
                item.Cost = 0;
        }
   }
 */

bool IsHaveBlade( uint16 pid )            // pm added
{
    if( pid == PID_KNIFE             ||
        pid == PID_SPEAR             ||
        pid == PID_THROWING_KNIFE    ||
        pid == PID_RIPPER            ||
        pid == PID_SPIKED_KNUCKLES   ||
        pid == PID_COMBAT_KNIFE      ||
        pid == PID_SHARP_SPEAR       ||
        pid == PID_SWITCHBLADE       ||
        pid == PID_SHIV              ||
        pid == PID_LIL_JESUS_WEAPON  ||
        pid == PID_WAKIZASHI_BLADE   )
        return true;

    return false;

}


bool TryDisassembleItem( Critter& cr, Item& item ) // Export
{

    if( cr.Timeout[ TO_BATTLE ] > 0 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_TIMEOUT_BATTLE_WAIT );
        return true;
    }

	bool isItemPartable = true;
    int  type = item.GetProtoId();

	uint16 repair = 0;
	uint16 science = 0;

	uint16[] tools;
	uint16[] parts;
	
	// ножи // tools.insertLast( PID_KNIFE ); tools.insertLast( PID_THROWING_KNIFE ); tools.insertLast( PID_SWITCHBLADE ); tools.insertLast( PID_COMBAT_KNIFE ); tools.insertLast( PID_REVKNIFE2 );
	
    switch( type )
    {
	case PID_SPEARTHROWER1:
		tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 3 );  break;
	case PID_FLARE:
		tools.insertLast( PID_MULTI_TOOL ); 
		if( Random( 1, 100 ) <= 10 ) {
			parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 ); }
		if( Random( 1, 100 ) <= 10 ) {
			parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );   }
		if( Random( 1, 100 ) <= 10 ) {
			parts.insertLast( PID_GUNPOWDER ); parts.insertLast( 1 );  }
		if( Random( 1, 100 ) <= 25 ) {
			parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 ); }
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( Random( 1, 6 ) );  
		break;
	case PID_OHLAD_MEH: 
	case PID_DETAL_MEH: 
		tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );  break;
	case PID_ELECTO_MEH: 
	case PID_EMKOCT_MEH: 
	case PID_DVIGAT_MEH: 
	case PID_SOED_MEH: 
		tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 2 );  break;
	case PID_CRAFT_M_STEL:
	case PID_PERED_MEH:	
		tools.insertLast( PID_MULTI_TOOL ); 
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 3 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 3 );  break;
	case PID_BANKA_MEH: tools.insertLast( PID_MULTI_TOOL ); parts.insertLast( PID_HLAM_MEH ); parts.insertLast( 1 );  break;
	case PID_CRAFT_L_HIDE: tools.insertLast( PID_KNIFE ); tools.insertLast( PID_THROWING_KNIFE ); tools.insertLast( PID_SWITCHBLADE ); tools.insertLast( PID_COMBAT_KNIFE ); tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 4 );  break;
    case PID_CRAFT_L_RAGS: tools.insertLast( PID_KNIFE ); tools.insertLast( PID_THROWING_KNIFE ); tools.insertLast( PID_SWITCHBLADE ); tools.insertLast( PID_COMBAT_KNIFE ); tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_LINT ); parts.insertLast( 4 );  break;
    case PID_ROPE: tools.insertLast( PID_KNIFE ); tools.insertLast( PID_THROWING_KNIFE ); tools.insertLast( PID_SWITCHBLADE ); tools.insertLast( PID_COMBAT_KNIFE ); tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_PART_OF_ROPE ); parts.insertLast( 5 );  break;
	case PID_HLAM_MEH: tools.insertLast( PID_SLEDGEHAMMER );
		parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 );  break;
	case PID_HLAM2_MEH: tools.insertLast( PID_SLEDGEHAMMER );
		parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 );  break;
	case PID_MOUSE_SKIN: tools.insertLast( PID_KNIFE ); tools.insertLast( PID_THROWING_KNIFE ); tools.insertLast( PID_SWITCHBLADE ); tools.insertLast( PID_COMBAT_KNIFE ); tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 );  break;
	case PID_GECKO_PELT: tools.insertLast( PID_KNIFE ); tools.insertLast( PID_THROWING_KNIFE ); tools.insertLast( PID_SWITCHBLADE ); tools.insertLast( PID_COMBAT_KNIFE ); tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 3 );  break;
	case PID_GOLDEN_GECKO_PELT: tools.insertLast( PID_KNIFE ); tools.insertLast( PID_THROWING_KNIFE ); tools.insertLast( PID_SWITCHBLADE ); tools.insertLast( PID_COMBAT_KNIFE ); tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 6 );  break;
	case PID_FIRE_GECKO_PELT: tools.insertLast( PID_KNIFE ); tools.insertLast( PID_THROWING_KNIFE ); tools.insertLast( PID_SWITCHBLADE ); tools.insertLast( PID_COMBAT_KNIFE ); tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 7 );  break;
	case PID_BRAHMIN_SKIN: tools.insertLast( PID_KNIFE ); tools.insertLast( PID_THROWING_KNIFE ); tools.insertLast( PID_SWITCHBLADE ); tools.insertLast( PID_COMBAT_KNIFE ); tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 8 ); break;
	case PID_CKNIFE_P: tools.insertLast( PID_CRAFT_L_RAGS );
		parts.insertLast( PID_COMBAT_KNIFE ); parts.insertLast( 1 );  break;		
	case PID_MKNIFE_P: tools.insertLast( PID_CRAFT_L_RAGS );
		parts.insertLast( PID_THROWING_KNIFE ); parts.insertLast( 1 );  break;
	case PID_SPEAK_P: tools.insertLast( PID_CRAFT_L_RAGS );
		parts.insertLast( PID_SPEAR ); parts.insertLast( 1 );  break;
	case PID_KNIFE_P: tools.insertLast( PID_CRAFT_L_RAGS );
		parts.insertLast( PID_KNIFE ); parts.insertLast( 1 );  break;
	case PID_SPEAR:	parts.insertLast( PID_KNIFE ); parts.insertLast( 1 ); parts.insertLast( PID_SHARPENED_POLE ); parts.insertLast( 1 ); parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 ); break;
	case PID_SHARP_SPEAR: parts.insertLast( PID_KNIFE ); parts.insertLast( 1 ); parts.insertLast( PID_SHARPENED_POLE ); parts.insertLast( 1 ); break;		
	case PID_SANDROBE: tools.insertLast( PID_KNIFE ); tools.insertLast( PID_THROWING_KNIFE ); tools.insertLast( PID_SWITCHBLADE ); tools.insertLast( PID_COMBAT_KNIFE ); tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 5 );  break;
    case PID_LEATHER_JACKET: tools.insertLast( PID_KNIFE ); tools.insertLast( PID_THROWING_KNIFE ); tools.insertLast( PID_SWITCHBLADE ); tools.insertLast( PID_COMBAT_KNIFE ); tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 3 ); parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 2 ); break;
    case PID_LEATHER_ARMOR:
    case PID_LEATHER_ARMOR_MK_II: tools.insertLast( PID_KNIFE ); tools.insertLast( PID_THROWING_KNIFE ); tools.insertLast( PID_SWITCHBLADE ); tools.insertLast( PID_COMBAT_KNIFE ); tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 ); parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 ); break;	
    case PID_CURED_LEATHER_ARMOR: tools.insertLast( PID_KNIFE ); tools.insertLast( PID_THROWING_KNIFE ); tools.insertLast( PID_SWITCHBLADE ); tools.insertLast( PID_COMBAT_KNIFE ); tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_CRAFT_L_RAGS ); parts.insertLast( 2 ); parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 ); break;
    case PID_CURED_LEATHER_ARMOR_MK_II: tools.insertLast( PID_KNIFE ); tools.insertLast( PID_THROWING_KNIFE ); tools.insertLast( PID_SWITCHBLADE ); tools.insertLast( PID_COMBAT_KNIFE ); tools.insertLast( PID_REVKNIFE2 );
		parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 1 ); parts.insertLast( PID_CRAFT_L_HIDE ); parts.insertLast( 4 ); break;
	case PID_METAL_ARMOR:
	case PID_METAL_ARMOR_MK_II: tools.insertLast( PID_MULTI_TOOL ); tools.insertLast( PID_SLEDGEHAMMER );
		parts.insertLast( PID_METAL_LIST_MEH ); parts.insertLast( 2 ); break;
	case PID_MANTIS_ARMOUR: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 2 ); break;
	case PID_MIRELURK_ARMOR: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_MANTIS_SHELL ); parts.insertLast( 4 ); break;
	case PID_REVOLVER_LOW: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_REVOLVER_PART ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;
    case PID_PISTOL_LOW: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;
    case PID_BIGGUN_LOW: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;
    case PID_SMOKE_GUN_LOW: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_BANKA_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;
    case PID_SHOTPISTOL_LOW: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;
    case PID_SHOTGUN: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;
    case PID_SAWED_OFF_SHOTGUN: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 2 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;
    case PID_10MM_PISTOL: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;
    case PID_GECKO_LOW: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 2 );
		parts.insertLast( PID_BANKA_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;
    case PID_REV_RIFLE_LOW: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_REVOLVER_PART ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;	
    case PID_FLAMER: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_SOED_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_EMKOCT_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_LIGHTER ); parts.insertLast( 1 );		
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;
    case PID_AUTOGUN_LOW: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );	break;
    case PID_SAWGUN_LOW: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_PERED_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_MOTOR ); parts.insertLast( 1 );
		parts.insertLast( PID_CHAIN ); parts.insertLast( 1 );	
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 2 );	break;
    case PID_GATLING_LOW: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 6 );	
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;
    case PID_SNIPER_GUN_LOW: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;
    case PID_NEEDLER_PISTOL: tools.insertLast( PID_SUPER_TOOL_KIT );
		parts.insertLast( PID_CRAFT_M_BARS ); parts.insertLast( 1 );	break;	
    case PID_DRUM_GUN_LOW: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;
    case PID_9MM_MAUSER: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;
    case PID_MAUSER_SMG: tools.insertLast( PID_MULTI_TOOL );
		parts.insertLast( PID_SHORT_TUBE ); parts.insertLast( 1 );
		parts.insertLast( PID_DETAL_MEH ); parts.insertLast( 1 );
		parts.insertLast( PID_CRAFT_M_JUNK ); parts.insertLast( 1 );	break;
    default: isItemPartable = false;
    }
	if (!isItemPartable) return false;
	
	if ( repair > cr.Skill[ SK_REPAIR ]	|| science > cr.Skill[ SK_SCIENCE ] )
		{
		cr.Say( SAY_NETMSG, "Нехватает навыков" );
		return true;
		}
	
	if ( ( tools.length()>0 ) && ( !valid( _CritGetItemHand( cr ) ) || tools.find( _CritGetItemHand( cr ).GetProtoId() ) == -1 ) )
		{
		cr.Say( SAY_NETMSG, "Необходимый инструмент:" );
	    for( uint8 j = 0; j < tools.length(); j++ )
			{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, 100*tools[j] );
			}	
		cr.Say( SAY_NETMSG, "Получаемые части:" );
		for( uint8 jj = 0; jj < parts.length(); jj+=2 )
			{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, 100*parts[jj] );
			}	
		return true;
		}
		
    for( uint8 i = 0; i < parts.length(); i+=2 )
        {
        cr.AddItem( parts[ i ], parts[ i + 1 ] );
        }
	
	cr.Say( SAY_NETMSG, "Вы разобрали предмет." );

	if ( item.GetCount() > 1 ) item.SetCount(item.GetCount() - 1);
	else DeleteItem( item );

    return true;
}

void robotRepairSkill (Critter& cr, Critter& targetCr, bool alreadyAllowed) {
	targetCr.StatBase[ST_VAR0] = cr.Id;
	cr.StatBase[ST_VAR0] = targetCr.Id;
	
	if(targetCr.Id != cr.Id && targetCr.Stat[ST_CURRENT_HP] > -30 && !alreadyAllowed){
		targetCr.ShowScreen (SCREEN_DIALOGBOX, 2, "answerRobotRepairSkill");
		targetCr.Say (SAY_DIALOGBOX_TEXT, "Вас хотят осмотреть, согласиться?");
		targetCr.Say (SAY_DIALOGBOX_BUTTON( 0 ), "Да");
		targetCr.Say (SAY_NETMSG, "Вас хотят осмотреть");
	}else{
		answerRobotRepairSkill (targetCr, 0, "");
	}
}

void answerRobotRepairSkill (Critter& targetCr, uint answerI, string& answerS) {
	Critter@ cr = GetCritter (targetCr.StatBase [ST_VAR0]);
	if (cr is null) return;
	
	bool useOnSelf = (cr.Id == targetCr.Id);
	
	uint16 statusFlag = targetCr.StatBase[ ST_CRSTATUS ];
	
	bool welder = (_CritCountItem (cr, PID_WELDING) > 0);
	bool spareParts = (_CritCountItem (cr, PID_CRAFT_M_BARS) > 0);
	
	
	bool isDamaged = false;
	string state = "Повреждения: ";
	
	int maxHP = targetCr.Stat [ST_MAX_LIFE];
	
	/*
	int i = BP_LIMBS_BEGIN;
	while (i <= BP_LIMBS_END) {
		if (targetCr.ParamBase [i] > maxHP * 0.8) {
			state += "крит. ";
		} else if (targetCr.ParamBase[i] > maxHP * 0.6) {
			state += "оч. тяж. ";
		} else if (targetCr.ParamBase[i] > maxHP * 0.4) {
			state += "тяж. ";
		} else if (targetCr.ParamBase[i] >= maxHP * 0.2) {
			state += "средн. ";
		}
		if (targetCr.ParamBase [i] >= maxHP * 0.2) {
			isDamaged = true;
			switch (i) {
				case BP_HEAD_HP:
					state += "процессора, ";
					break;
				case BP_EYES_HP:
					state += "сенсоров, ";
					break;
				case BP_LEFT_ARM_HP:
					state += "л. манипулятора, ";
					break;
				case BP_RIGHT_ARM_HP:
					state += "п. манипулятора, ";
					break;
				case BP_LEFT_LEG_HP:
					state += "л. серво, ";
					break;
				case BP_RIGHT_LEG_HP:
					state += "п. серво, ";
					break;
				case BP_GROIN_HP:
					state += "слива, ";
					break;
				case BP_TORSO_HP:
					state += "корпуса, ";
					break;
			}
		}
		i ++;
	}
	*/
	
	if (!isDamaged) state += "нет серьезных повреждений";
	
	cr.StatBase [ST_VAR0] = targetCr.Id;
	
	if (FLAG(statusFlag, CR_STATUS_HEAVY_DMG)) {
		state += ", разгерметизация";
		cr.ShowScreen( SCREEN_DIALOGBOX, 3, "answerRobotRepair1" );
	        cr.Say( SAY_DIALOGBOX_TEXT, state);
	    if (welder) cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "сварка" );
	    else cr.Say (SAY_DIALOGBOX_BUTTON (0), "Нет сварки");
		if (spareParts) cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "исп. запчасти" );
		else cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "нет запчастей" );
		cr.Say (SAY_DIALOGBOX_BUTTON (2), "Осмотр поломок");
	    return;
	}
	
	cr.ShowScreen( SCREEN_DIALOGBOX, 3, "answerRobotRepair1" );
	cr.Say( SAY_DIALOGBOX_TEXT, state);
	cr.Say (SAY_DIALOGBOX_BUTTON (0), "Сварка не нужна");
	if (spareParts) cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "исп. запчасти" );
	else cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "нет запчастей" );
	cr.Say (SAY_DIALOGBOX_BUTTON (2), "Осмотр поломок");
}

void answerRobotRepair1 (Critter& player, uint answerI, string& answerS) {
	Critter@ targetCr = GetCritter (player.Stat [ST_VAR0]);
	if (targetCr is null) return;
	
	uint16 statusFlag = targetCr.StatBase[ ST_CRSTATUS ];
	bool useOnSelf = (player.Id == targetCr.Id);
	
	int sk = player.Skill [SK_REPAIR];
	
	bool welder = (_CritCountItem (player, PID_WELDING) > 0);
	bool spareParts = (_CritCountItem (player, PID_CRAFT_M_BARS) > 0);
	
	if (answerI == 0 && welder && FLAG(statusFlag, CR_STATUS_HEAVY_DMG)) {
		if (useOnSelf && player.ParamBase [BP_ROBOT_SELF_REPAIR] == 0) {
			player.Say (SAY_NETMSG, "Ваши манипуляторы не позволяют Вам заниматься сваркой");
			robotRepairSkill (player, targetCr, true);
		} else {
			player.Say (SAY_EMOTE, "Занимается сваркой");
			if (sk > Random (0, 140)) {
				ChangeStatus( targetCr, CR_STATUS_HEAVY_DMG, 0, false );
				player.Say (SAY_NETMSG, "Вы успешно заварили разгерметизацию корпуса.");
			} else {
				targetCr.StatBase[ ST_CURRENT_HP ] -= Random (1, 16);
				//targetCr.ParamBase [BP_TORSO_HP] += Random (1, 16);
				player.Say (SAY_NETMSG, "Вы случайно проварили еще одну дырку в корпусе");
			}
			robotRepairSkill (player, targetCr, true);
		}
	} else if (answerI == 0) {
		robotRepairSkill (player, targetCr, true);
	}
	if (answerI == 1 && spareParts) {
		if (useOnSelf && player.ParamBase [BP_ROBOT_SELF_REPAIR] == 0) {
			player.Say (SAY_NETMSG, "Ваши манипуляторы не позволяют Вам поменять у себя запчасти");
			robotRepairSkill (player, targetCr, true);
		} else {
			int i = 0;
			while (i < 7) {
				player.Animate (ANIM1_UNARMED, ANIM2_USE, null, false, true);
				i ++;
			}
			player.Say (SAY_EMOTE, "Меняет запчасти");
			if (!ltp_inited) ltp_init ();
			StartProcess (player, LTP_ROBOT_REPAIR, 10*1000);
		}
	}
	if (answerI == 2) {
		bool damages = false;
		string state = "Поломки: ";

		if (targetCr.Damage [DAMAGE_EYE] > 0) {state+="сенсоры, "; damages = true;}
		if (targetCr.Damage [DAMAGE_RIGHT_ARM] > 0) {state += "п. манипулятор, "; damages = true;}
		if (targetCr.Damage [DAMAGE_LEFT_ARM] > 0) {state += "л. манипулятор, "; damages = true;}
		if (targetCr.Damage [DAMAGE_RIGHT_LEG] > 0) {state += "правый серво, "; damages = true;}
		if (targetCr.Damage [DAMAGE_LEFT_LEG] > 0) {state += "левый серво"; damages = true;}
		
		if (!damages) state += "нет.";
		
		player.ShowScreen (SCREEN_DIALOGBOX, 6, "answerRobotRepairCripple");
		if (targetCr.Damage [DAMAGE_EYE] > 0) player.Say (SAY_DIALOGBOX_BUTTON (0), "Чинить сенсоры");
		else player.Say (SAY_DIALOGBOX_BUTTON (0), "Сенсоры - ок");
		if (targetCr.Damage [DAMAGE_RIGHT_ARM] > 0) player.Say (SAY_DIALOGBOX_BUTTON (1), "Чинить П. Манип");
		else player.Say (SAY_DIALOGBOX_BUTTON (1), "П. Манип - ок");
		if (targetCr.Damage [DAMAGE_LEFT_ARM] > 0) player.Say (SAY_DIALOGBOX_BUTTON (2), "Чинить Л. Манип");
		else player.Say (SAY_DIALOGBOX_BUTTON (2), "Л. Манип - ок");
		if (targetCr.Damage [DAMAGE_RIGHT_LEG] > 0) player.Say (SAY_DIALOGBOX_BUTTON (3), "Чинить П. Серво");
		else player.Say (SAY_DIALOGBOX_BUTTON (3), "П. Серво - ок");
		if (targetCr.Damage [DAMAGE_LEFT_LEG] > 0) player.Say (SAY_DIALOGBOX_BUTTON (4), "Чинить Л. Серво");
		else player.Say (SAY_DIALOGBOX_BUTTON (4), "Л. Серво - ок");
		player.Say (SAY_DIALOGBOX_BUTTON (5), "Назад");
	}
}

void answerRobotRepairCripple (Critter& player, uint answerI, string& answerS) {
	Critter@ targetCr = GetCritter (player.Stat [ST_VAR0]);
	if (targetCr is null) return;
	
	bool useOnSelf = (player.Id == targetCr.Id);
	
	bool mechDetail = (_CritCountItem (player, PID_CRAFT_M_STEL) > 0);
	bool motionSensor = (_CritCountItem (player, PID_MOTION_SENSOR) > 0);
	
	int sk = player.Skill [SK_REPAIR];
	
	if (useOnSelf && player.ParamBase [BP_ROBOT_SELF_REPAIR] == 0) {
		player.Say (SAY_NETMSG, "Ваши манипуляторы не позволяют вам починить себя");
		answerRobotRepair1 (player, 2, "");
	} else {
	
		if (answerI == 0 && targetCr.Damage [DAMAGE_EYE] > 0) {
			if (!motionSensor) {
				player.Say (SAY_NETMSG, "Вам нужен сенсор движений.");
				robotRepairSkill (player, targetCr, true);
			} else {
				if (sk > Random (0, 120)) {
					targetCr.DamageBase [DAMAGE_EYE] = 0;
					player.Say (SAY_NETMSG, "Вы успешно заменили сенсоры.");
				} else {
					player.Say (SAY_NETMSG, "Вы не поняли, куда вставлять сенсор.");
				}
			}
		}
		if (answerI == 1 && targetCr.Damage [DAMAGE_RIGHT_ARM] > 0) {
			if (!mechDetail) {
				player.Say (SAY_NETMSG, "Вам нужна сложная механическая деталь.");
				robotRepairSkill (player, targetCr, true);
			} else {
				if (sk > Random (0, 120)) {
					targetCr.DamageBase [DAMAGE_RIGHT_ARM] = 0;
					player.Say (SAY_NETMSG, "Вы успешно заменили детали.");
				} else {
					player.Say (SAY_NETMSG, "Вы не поняли, куда вставлять деталь.");
				}
			}
		}
		if (answerI == 2 && targetCr.Damage [DAMAGE_LEFT_ARM] > 0) {
			if (!mechDetail) {
				player.Say (SAY_NETMSG, "Вам нужна сложная механическая деталь.");
				robotRepairSkill (player, targetCr, true);
			} else {
				if (sk > Random (0, 120)) {
					targetCr.DamageBase [DAMAGE_LEFT_ARM] = 0;
					player.Say (SAY_NETMSG, "Вы успешно заменили детали.");
				} else {
					player.Say (SAY_NETMSG, "Вы не поняли, куда вставлять деталь.");
				}
			}
		}
		if (answerI == 3 && targetCr.Damage [DAMAGE_RIGHT_LEG] > 0) {
			if (!mechDetail) {
				player.Say (SAY_NETMSG, "Вам нужна сложная механическая деталь.");
				robotRepairSkill (player, targetCr, true);
			} else {
				if (sk > Random (0, 120)) {
					targetCr.DamageBase [DAMAGE_RIGHT_LEG] = 0;
					player.Say (SAY_NETMSG, "Вы успешно заменили детали.");
				} else {
					player.Say (SAY_NETMSG, "Вы не поняли, куда вставлять деталь.");
				}
			}
		}
		if (answerI == 4 && targetCr.Damage [DAMAGE_LEFT_LEG] > 0) {
			if (!mechDetail) {
				player.Say (SAY_NETMSG, "Вам нужна сложная механическая деталь.");
				robotRepairSkill (player, targetCr, true);
			} else {
				if (sk > Random (0, 120)) {
					targetCr.DamageBase [DAMAGE_LEFT_LEG] = 0;
					player.Say (SAY_NETMSG, "Вы успешно заменили детали.");
				} else {
					player.Say (SAY_NETMSG, "Вы не поняли, куда вставлять деталь.");
				}
			}
		}
		robotRepairSkill (player, targetCr, true);
	}
}

uint process_robot_repair ( Critter@ cr, int& param0, int& param1, int& param2 ) {
	LTPROCESSD (LTP_ROBOT_REPAIR)
	Critter@ targetCr = GetCritter (cr.Stat [ST_VAR0]);
	
	int sk = cr.Skill [SK_REPAIR];
	
	if (sk > Random (0, 80)) {
		/*
		int i = BP_LIMBS_BEGIN;
		while (i <= BP_LIMBS_END) {
			targetCr.ParamBase [i] -= targetCr.Stat [ST_MAX_LIFE] / 3;
			i ++;
		}
		*/
		targetCr.ParamBase[ST_CURRENT_HP] = targetCr.Stat[ST_MAX_LIFE]; //Впрочем, я бы сделал фиксированный рандом от 20 до 40 ХП за 1 деталь.
		cr.DeleteItem (PID_CRAFT_M_BARS, 1);
		cr.Say (SAY_NETMSG, "Вы успешно меняете запчасти.");
	} else {
		cr.Say (SAY_NETMSG, "Вы не понимаете, куда вставлять запчасти");
	}
	return 0;
}
